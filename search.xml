<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一、入门算法</title>
      <link href="/2024/10/12/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E4%B8%80%E3%80%81%E5%85%A5%E9%97%A8%E7%AE%97%E6%B3%95/"/>
      <url>/2024/10/12/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E4%B8%80%E3%80%81%E5%85%A5%E9%97%A8%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="【易错：ASCII码】s-i-‘0’-和-int-s-i-为什么结果不一样"><a href="#【易错：ASCII码】s-i-‘0’-和-int-s-i-为什么结果不一样" class="headerlink" title="【易错：ASCII码】s[i]-‘0’;和(int)s[i];为什么结果不一样"></a>【易错：ASCII码】s[i]-‘0’;和(int)s[i];为什么结果不一样</h2><p>在C++中，<code>s[i] - &#39;0&#39;</code> 和 <code>(int)s[i]</code> 表达式虽然都涉及到将字符转换为整数，但它们的目的和结果通常是不同的。</p><ol><li><p><strong><code>s[i] - &#39;0&#39;</code></strong></p><p>这个表达式通常用于将字符（假设它是一个数字字符，即 <code>&#39;0&#39;</code> 到 <code>&#39;9&#39;</code> 之间的某个字符）转换为对应的整数值。在ASCII编码中，数字字符 <code>&#39;0&#39;</code> 到 <code>&#39;9&#39;</code> 是连续排列的，且 <code>&#39;0&#39;</code> 的ASCII码值是48。因此，当你从一个数字字符中减去 <code>&#39;0&#39;</code> 时，你实际上是在计算该字符与 <code>&#39;0&#39;</code> 在ASCII表中的距离，这个距离恰好等于该字符所代表的数字值。</p><p>例如，如果 <code>s[i]</code> 是 <code>&#39;5&#39;</code>，那么 <code>s[i] - &#39;0&#39;</code> 的结果将是 <code>5 - 48 + 48</code>（这里的 <code>48</code> 是 <code>&#39;0&#39;</code> 的ASCII码值，但加48再减48是为了说明原理，实际上直接计算 <code>53 - 48</code>）等于 <code>5</code>。</p></li><li><p><strong><code>(int)s[i]</code></strong></p><p>这个表达式将字符 <code>s[i]</code> 强制转换为整数类型。但是，这里转换得到的是字符的ASCII码值，而不是字符所代表的数字值（如果它是一个数字字符的话）。</p><p>例如，如果 <code>s[i]</code> 是 <code>&#39;5&#39;</code>，那么 <code>(int)s[i]</code> 的结果将是 <code>53</code>，因为 <code>&#39;5&#39;</code> 在ASCII表中的值是53。</p></li></ol><p>因此，这两个表达式在用途和结果上是不同的。<code>s[i] - &#39;0&#39;</code> 用于将数字字符转换为对应的整数值，而 <code>(int)s[i]</code> 则用于获取字符的ASCII码值。在实际编程中，你应该根据具体需求选择使用哪个表达式。</p><hr><h2 id="输入字符串"><a href="#输入字符串" class="headerlink" title="输入字符串"></a>输入字符串</h2><p>在C++中，字符串的输入方法有多种，以下是几种常见的方法：</p><ol><li><p><strong>使用<code>cin</code>直接输入</strong>：</p><ul><li><code>cin &gt;&gt; str;</code>：这种方法从标准输入读取单个单词，存储在变量<code>str</code>中。它会在遇到空格或换行符时停止读取，因此只能读取到第一个空格之前的部分。</li></ul></li><li><p><strong>使用<code>cin.get()</code>输入</strong>：</p><ul><li><code>cin.get(str, size);</code>：从标准输入读取指定大小的字符串（包括空字符），存储在字符数组<code>str</code>中。这种方法可以读取包含空格的字符串，但需要注意数组的大小，以避免溢出。</li></ul></li><li><p><strong>使用<code>getline()</code>函数输入</strong>：</p><ul><li><code>getline(cin, str);</code>：从标准输入读取整行，包括空格和换行符（换行符会被丢弃），存储在字符串<code>str</code>中。这种方法常用于需要读取包含空格的整行输入的情况。</li></ul></li><li><p><strong>使用<code>gets()</code>函数输入</strong>（注意：<code>gets()</code>函数是不安全的，已被C++标准弃用，推荐使用<code>gets_s()</code>或其他安全的字符串输入方法）：</p><ul><li><code>gets(str);</code>：从标准输入读取一行字符串，包括空格，直到遇到换行符为止。换行符会被存储在字符串中，但通常会被后续的输入操作覆盖或丢弃。由于<code>gets()</code>函数存在缓冲区溢出的风险，因此不推荐使用。</li></ul></li><li><p><strong>使用<code>scanf()</code>输入</strong>：</p><ul><li><code>scanf(&quot;%s&quot;, str);</code>：这种方法只能读取不包含空格的字符串。当输入字符串中包含空格时，<code>scanf()</code>会在遇到第一个空格时停止读取。此外，使用<code>scanf()</code>时需要注意缓冲区的大小，以避免溢出。同时，<code>scanf()</code>会在输入缓冲区中留下换行符，这可能会影响后续的输入操作。</li></ul></li><li><p><strong>使用<code>getchar()</code>逐个字符输入</strong>：</p><ul><li><code>char ch; while((ch = getchar()) != &#39;\n&#39;) &#123; /* 处理字符 */ &#125;</code>：这种方法通常用于逐个字符地读取输入，直到遇到换行符为止。它可以用于读取包含空格的字符串，但需要手动处理字符和构建字符串。</li></ul></li><li><p><strong>使用文件输入流</strong>：</p><ul><li>如果需要从文件中读取字符串，可以使用文件输入流<code>ifstream</code>。例如，<code>ifstream infile(&quot;filename.txt&quot;); string line; while(getline(infile, line)) &#123; /* 处理每行 */ &#125;</code>。</li></ul></li></ol><p>需要注意的是，以上方法中有些是不安全的或已被弃用的（如<code>gets()</code>），在实际编程中应尽量避免使用。同时，对于不同的应用场景和需求，可以选择最适合的字符串输入方法。例如，对于需要读取包含空格的整行输入的情况，通常推荐使用<code>getline()</code>函数。</p><hr><h2 id="for循环遍历字符串"><a href="#for循环遍历字符串" class="headerlink" title="for循环遍历字符串"></a>for循环遍历字符串</h2><p>在C++中，你可以使用<code>for</code>循环来遍历一个<code>std::string</code>字符串。<code>std::string</code>提供了多种访问其字符的方法，包括使用下标运算符<code>[]</code>和迭代器。以下是一些使用<code>for</code>循环遍历字符串的示例：</p><h3 id="使用下标运算符"><a href="#使用下标运算符" class="headerlink" title="使用下标运算符"></a>使用下标运算符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; str[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>str.size()</code>返回字符串的长度，<code>str[i]</code>访问字符串中位置为<code>i</code>的字符。注意，<code>size_t</code>是一个无符号整数类型，通常用于表示大小和索引。</p><h3 id="使用范围for循环（C-11及以上）"><a href="#使用范围for循环（C-11及以上）" class="headerlink" title="使用范围for循环（C++11及以上）"></a>使用范围for循环（C++11及以上）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : str) &#123;</span><br><span class="line">        std::cout &lt;&lt; c &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范围<code>for</code>循环（也称为基于范围的<code>for</code>循环）简化了遍历容器的语法。在这个例子中，<code>c</code>将依次被赋值为字符串<code>str</code>中的每个字符。</p><h3 id="使用迭代器"><a href="#使用迭代器" class="headerlink" title="使用迭代器"></a>使用迭代器</h3><p>虽然在这个特定的情况下使用下标运算符或范围<code>for</code>循环可能更常见，但了解如何使用迭代器来遍历字符串也是很有用的，因为迭代器是STL中更通用的概念。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::string::iterator it = str.<span class="built_in">begin</span>(); it != str.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        std::cout &lt;&lt; *it &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>str.begin()</code>返回一个指向字符串第一个字符的迭代器，<code>str.end()</code>返回一个指向字符串末尾之后位置的迭代器（不是最后一个字符，而是最后一个字符之后的位置，用作循环的结束条件）。<code>*it</code>解引用迭代器以获取它所指向的字符。</p><p>注意，从C++11开始，你还可以使用<code>auto</code>关键字来自动推导迭代器的类型，从而简化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = str.<span class="built_in">begin</span>(); it != str.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        std::cout &lt;&lt; *it &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个修改后的例子中，<code>auto</code>使得代码更加简洁，并且减少了因类型错误而导致的问题。</p><hr><h2 id="取数字里的每一位数"><a href="#取数字里的每一位数" class="headerlink" title="取数字里的每一位数"></a>取数字里的每一位数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b用来保存当前的数字，c用来保存当前的位置</span></span><br><span class="line"><span class="type">int</span> b,c;</span><br><span class="line"><span class="keyword">while</span>(b!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    c=b%<span class="number">10</span>;<span class="comment">//求余取当前位数</span></span><br><span class="line">    b=b/<span class="number">10</span>;<span class="comment">//除10取下一位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="【函数】isalpha、isspace、isdigit判断字母空格和数字"><a href="#【函数】isalpha、isspace、isdigit判断字母空格和数字" class="headerlink" title="【函数】isalpha、isspace、isdigit判断字母空格和数字"></a>【函数】isalpha、isspace、isdigit判断字母空格和数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="type">char</span> input[<span class="number">1000</span>];  <span class="comment">// 假设输入字符不会超过1000个  </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入一行字符: &quot;</span>;  </span><br><span class="line">    cin.<span class="built_in">getline</span>(input, <span class="number">1000</span>);  <span class="comment">// 使用getline以获取包含空格的整行输入  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> letters = <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> spaces = <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> digits = <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> others = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; input[i] != <span class="string">&#x27;\0&#x27;</span>; ++i) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalpha</span>(input[i])) &#123;  </span><br><span class="line">            ++letters;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isspace</span>(input[i])) &#123;  </span><br><span class="line">            ++spaces;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(input[i])) &#123;  </span><br><span class="line">            ++digits;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            ++others;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;英文字母个数: &quot;</span> &lt;&lt; letters &lt;&lt; endl;  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;空格个数: &quot;</span> &lt;&lt; spaces &lt;&lt; endl;  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数字个数: &quot;</span> &lt;&lt; digits &lt;&lt; endl;  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;其他字符个数: &quot;</span> &lt;&lt; others &lt;&lt; endl;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【函数】toupper和tolower大小写转换"><a href="#【函数】toupper和tolower大小写转换" class="headerlink" title="【函数】toupper和tolower大小写转换"></a>【函数】toupper和tolower大小写转换</h2><h3 id="toupper-函数"><a href="#toupper-函数" class="headerlink" title="toupper 函数"></a><code>toupper</code> 函数</h3><p><code>toupper</code> 函数用于将小写字符转换为对应的大写字符。如果传入的字符不是小写字母，则函数返回该字符本身。</p><h3 id="tolower-函数"><a href="#tolower-函数" class="headerlink" title="tolower 函数"></a><code>tolower</code> 函数</h3><p><code>tolower</code> 函数用于将大写字符转换为对应的小写字符。如果传入的字符不是大写字母，则函数返回该字符本身。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.a.begin()和a.end()定义了要进行转换的范围，即容器a的开始和结束迭代器。</span></span><br><span class="line"><span class="comment">//2.第三个参数a.begin()指定了转换后元素存储的起始位置，这里直接在原容器a上进行修改。</span></span><br><span class="line"><span class="comment">//3.::tolower是一个函数指针，指向C标准库中的tolower函数，该函数用于将大写字符转换为小写字符。注意，这里使用的是全局命名空间的tolower，所以前面有::。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换为大写</span></span><br><span class="line"><span class="built_in">transform</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),a.<span class="built_in">begin</span>(),::toupper);</span><br><span class="line"><span class="comment">//zuan&#x27;hua</span></span><br><span class="line"><span class="built_in">transform</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),a.<span class="built_in">begin</span>(),::tolower);</span><br></pre></td></tr></table></figure><h2 id="【函数】sscanf和ssprintf的用法"><a href="#【函数】sscanf和ssprintf的用法" class="headerlink" title="【函数】sscanf和ssprintf的用法"></a>【函数】sscanf和ssprintf的用法</h2><p>sscanf是C语言中的一个函数，用于从字符串中读进与指定格式相符的数据。它是scanf函数的字符串版本，允许从一个字符串而不是标准输入中读取数据。</p><h3 id="sscanf"><a href="#sscanf" class="headerlink" title="sscanf"></a>sscanf</h3><h4 id="一、sscanf函数原型"><a href="#一、sscanf函数原型" class="headerlink" title="一、sscanf函数原型"></a>一、sscanf函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sscanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>str</code>：待解析的字符串。</li><li><code>format</code>：字符串格式描述，用于指定如何从字符串中读取数据。</li><li><code>...</code>：一序列数目不定的指针参数，用于存储解析后的数据。</li></ul><h4 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a>二、基本用法</h4><p>sscanf函数支持多种数据类型的读取，包括字符串（%s）、整型（%d, %ld等）、浮点型（%f, %lf等）。使用时，需要在format字符串中指定数据类型，并提供相应的指针参数来存储读取的数据。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;123 456.78&quot;</span>;  </span><br><span class="line"><span class="type">int</span> a;  </span><br><span class="line"><span class="type">float</span> b;  </span><br><span class="line"><span class="built_in">sscanf</span>(str, <span class="string">&quot;%d %f&quot;</span>, &amp;a, &amp;b);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %.2f\n&quot;</span>, a, b);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span>, b = <span class="number">456.78</span></span><br></pre></td></tr></table></figure><h4 id="三、高级用法"><a href="#三、高级用法" class="headerlink" title="三、高级用法"></a>三、高级用法</h4><ol><li><p><strong>取指定长度的字符串</strong>：</p><p> 使用<code>%[width]</code>格式说明符可以读取指定长度的字符串。例如：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;123456789&quot;</span>;  </span><br><span class="line"><span class="type">char</span> buf[<span class="number">10</span>];  </span><br><span class="line"><span class="built_in">sscanf</span>(str, <span class="string">&quot;%4s&quot;</span>, buf);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br></pre></td></tr></table></figure><p> 输出结果为：<code>1234</code></p></li><li><p><strong>取到指定字符为止的字符串</strong>：</p><p> 使用<code>%[^chars]</code>格式说明符可以读取直到遇到指定字符集为止的字符串。例如：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;123456abcdedf&quot;</span>;  </span><br><span class="line"><span class="type">char</span> buf[<span class="number">50</span>];  </span><br><span class="line"><span class="built_in">sscanf</span>(str, <span class="string">&quot;%[^A-Z]&quot;</span>, buf);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br></pre></td></tr></table></figure><p> 输出结果为：<code>123456abcdedf</code></p></li><li><p><strong>忽略指定字符</strong>：</p><p> 使用<code>%*</code>格式说明符可以忽略指定数量的字符或满足特定格式的字符串。例如：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;iios/12DDWDFF@122&quot;</span>;  </span><br><span class="line"><span class="type">char</span> buf[<span class="number">50</span>];  </span><br><span class="line"><span class="built_in">sscanf</span>(str, <span class="string">&quot;%*[^/]/%[^@]&quot;</span>, buf);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br></pre></td></tr></table></figure><p> 输出结果为：<code>12DDWDFF</code></p></li><li><p><strong>读取多个数据类型</strong>：</p><p> sscanf函数可以一次读取多个数据类型，只需在format字符串中依次指定数据类型，并提供相应的指针参数即可。例如：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;AT+COM=123456,789.012&quot;</span>;  </span><br><span class="line"><span class="type">int</span> a;  </span><br><span class="line"><span class="type">float</span> b;  </span><br><span class="line"><span class="built_in">sscanf</span>(str, <span class="string">&quot;AT+COM=%d,%f&quot;</span>, &amp;a, &amp;b);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %.2f\n&quot;</span>, a, b);</span><br></pre></td></tr></table></figure><p> 输出结果为：<code>a = 123456, b = 789.01</code></p></li></ol><h4 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h4><ul><li><p>使用sscanf函数时，要确保提供的缓冲区足够大，以避免缓冲区溢出问题。</p></li><li><p>sscanf函数的返回值表示成功读取的数据项数量，可以通过检查返回值来判断读取是否成功。</p></li><li><p>在处理复杂格式的字符串时，要仔细设计format字符串，以确保正确读取数据。</p></li></ul><p>sprintf是C语言中的一个标准库函数，全称是“string print”，意为“字符串打印”。这个函数的主要功能是将格式化的数据写入某个字符串中，即发送格式化输出到一个字符串所指向的内存区域。</p><h3 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf"></a>sprintf</h3><h4 id="一、sprintf函数原型"><a href="#一、sprintf函数原型" class="headerlink" title="一、sprintf函数原型"></a>一、sprintf函数原型</h4><p>sprintf函数的声明通常如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c复制代码</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>str</code>：这是一个指向字符数组的指针，该数组用于存储格式化后的字符串。</li><li><code>format</code>：这是一个格式控制字符串，用于指定输出的格式。它可以包含嵌入的格式标签，这些标签会被随后附加参数中指定的值替换，并按需求进行格式化。</li><li><code>...</code>：这是一个可变参数列表，用于指定要格式化的数据。这些数据的类型和数量应与格式控制字符串中的格式标签相匹配。</li></ul><h4 id="二、格式标签"><a href="#二、格式标签" class="headerlink" title="二、格式标签"></a>二、格式标签</h4><p>格式控制字符串中的格式标签以“%”开头，后跟一个或多个字符来指定数据类型、宽度、精度等。常见的格式标签包括：</p><ul><li><code>%d</code>：表示一个整数。</li><li><code>%f</code>：表示一个浮点数。</li><li><code>%c</code>：表示一个字符。</li><li><code>%s</code>：表示一个字符串。</li><li><code>%%</code>：表示一个百分号字符。</li></ul><p>此外，还可以指定输出的宽度和精度。例如，<code>%5d</code>表示输出的整数宽度至少为5个字符，不足部分用空格填充；<code>%.2f</code>表示输出的浮点数保留两位小数。</p><h4 id="三、使用示例"><a href="#三、使用示例" class="headerlink" title="三、使用示例"></a>三、使用示例</h4><p>以下是一个使用sprintf函数的示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">50</span>];  </span><br><span class="line">    <span class="type">int</span> num = <span class="number">123</span>;  </span><br><span class="line">    <span class="type">float</span> pi = <span class="number">3.14159</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 使用sprintf函数将格式化的数据写入buffer字符串中  </span></span><br><span class="line">    <span class="built_in">sprintf</span>(buffer, <span class="string">&quot;The number is %d and the value of pi is %.2f&quot;</span>, num, pi);  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 使用printf函数输出buffer字符串的内容  </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buffer);  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">复制代码</span><br><span class="line"></span><br><span class="line">The number is 123 and the value of pi is 3.14</span><br></pre></td></tr></table></figure><h4 id="四、注意事项-1"><a href="#四、注意事项-1" class="headerlink" title="四、注意事项"></a>四、注意事项</h4><ol><li><strong>缓冲区大小</strong>：使用sprintf函数时，需要确保提供的缓冲区足够大，以存储格式化后的字符串。如果缓冲区太小，可能会导致缓冲区溢出，进而引发程序崩溃或安全问题。</li><li><strong>参数匹配</strong>：可变参数列表中的参数应与格式控制字符串中的格式标签一一对应，且类型相匹配。否则，可能会导致未定义的行为或程序崩溃。</li><li><strong>返回值</strong>：sprintf函数返回成功写入字符串中的字符数（不包括终止符’\0’）。如果发生错误，则返回负值。可以通过检查返回值来判断写入是否成功。</li></ol><h2 id="【函数】n的阶乘和累加"><a href="#【函数】n的阶乘和累加" class="headerlink" title="【函数】n的阶乘和累加"></a>【函数】n的阶乘和累加</h2><h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归方法</span></span><br><span class="line"><span class="comment">//递归方法利用阶乘的递归特性，即n! = n * (n-1)!，通过反复调用自身来计算阶乘。这种方法代码简洁，但对于较大的数可能会导致栈溢出。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环方法</span></span><br><span class="line"><span class="comment">//循环方法通过循环逐步计算阶乘，避免了递归方法的栈溢出问题。对于较大的数，这种方法通常更可靠。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> result = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;  </span><br><span class="line">        result *= i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//标准库函数</span></span><br><span class="line"><span class="comment">//C++标准库中提供了一个名为tgamma的函数，它可以计算阶乘（但需要注意的是，tgamma(n)实际上返回的是(n-1)!的伽马函数值，所以要计算n!需要调用tgamma(n+1)）。不过，这种方法通常不是最直接或最高效的，因为它涉及浮点数运算和伽马函数的计算。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span>  </span></span><br><span class="line"><span class="type">double</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> tgamma(n + <span class="number">1</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="累加"><a href="#累加" class="headerlink" title="累加"></a>累加</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*在C++中，计算一个数从1加到它本身（即计算`1 + 2 + ... + n`），最直接的方法是使用循环或数学公式。对于这种方法，效率主要取决于算法的时间复杂度。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用循环</span></span><br><span class="line"><span class="comment">//使用循环的方法是最直观的，时间复杂度为O(n)：</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;  </span><br><span class="line">        result += i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数学公式</span></span><br><span class="line"><span class="comment">//然而，有一个数学公式可以直接计算出这个结果，即等差数列求和公式：</span></span><br><span class="line"><span class="comment">//使用这个公式，可以将时间复杂度降低到O(1)：</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> n * (n + <span class="number">1</span>) / <span class="number">2</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【函数】sort排序"><a href="#【函数】sort排序" class="headerlink" title="【函数】sort排序"></a>【函数】sort排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort默认升序(从小到大)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//降序排序方法:</span></span><br><span class="line"><span class="comment">//a.使用greater&lt;int&gt;()</span></span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">ort</span>(arr, arr + <span class="number">5</span>, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="comment">//b.自定义一个比较大小的函数，将大的排前面</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(arr,arr + <span class="number">10</span>,cmp);</span><br></pre></td></tr></table></figure><h2 id="【函数】reverse翻转数组"><a href="#【函数】reverse翻转数组" class="headerlink" title="【函数】reverse翻转数组"></a>【函数】reverse翻转数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 翻转函数</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">reverse(a, a+<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="【函数】向上-下取整-ceil-floor"><a href="#【函数】向上-下取整-ceil-floor" class="headerlink" title="【函数】向上&#x2F;下取整(ceil&#x2F;floor)"></a>【函数】向上&#x2F;下取整(ceil&#x2F;floor)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向上取整</span></span><br><span class="line"><span class="type">double</span> rounded_num1 = <span class="built_in">ceil</span>(num1);</span><br><span class="line"><span class="comment">//向下取整</span></span><br><span class="line"><span class="type">double</span> rounded_num1 = <span class="built_in">floor</span>(num1);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五种筛质数的方法</title>
      <link href="/2024/10/12/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E4%BA%94%E7%A7%8D%E7%AD%9B%E8%B4%A8%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2024/10/12/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E4%BA%94%E7%A7%8D%E7%AD%9B%E8%B4%A8%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>筛选质数在C++中有多种方法，下面列出几种常见的方法并提供相应的代码示例：</p><h3 id="1-枚举法（试除法）"><a href="#1-枚举法（试除法）" class="headerlink" title="1. 枚举法（试除法）"></a>1. 枚举法（试除法）</h3><p>这是最简单的质数筛选方法，通过逐个检查每个数是否能被小于它的数整除来判断是否为质数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isPrime</span>(i)) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-埃拉托斯特尼筛法（Sieve-of-Eratosthenes）"><a href="#2-埃拉托斯特尼筛法（Sieve-of-Eratosthenes）" class="headerlink" title="2. 埃拉托斯特尼筛法（Sieve of Eratosthenes）"></a>2. 埃拉托斯特尼筛法（Sieve of Eratosthenes）</h3><p>这种方法通过标记所有合数来筛选出质数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SieveOfEratosthenes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">prime</span><span class="params">(n + <span class="number">1</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">2</span>; p * p &lt;= n; p++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prime[p]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = p * p; i &lt;= n; i += p) &#123;</span><br><span class="line">                prime[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">2</span>; p &lt;= n; p++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prime[p]) &#123;</span><br><span class="line">            cout &lt;&lt; p &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">SieveOfEratosthenes</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-线性筛法（Linear-Sieve）"><a href="#3-线性筛法（Linear-Sieve）" class="headerlink" title="3. 线性筛法（Linear Sieve）"></a>3. 线性筛法（Linear Sieve）</h3><p>线性筛法避免了重复标记，通过每个数的最小质因子来筛选。</p><p>cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinearSieve</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">isPrime</span><span class="params">(n + <span class="number">1</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i]) &#123;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; primes.<span class="built_in">size</span>() &amp;&amp; i * primes[j] &lt;= n; ++j) &#123;</span><br><span class="line">            isPrime[i * primes[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> prime : primes) &#123;</span><br><span class="line">        cout &lt;&lt; prime &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">LinearSieve</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-奇数筛法"><a href="#4-奇数筛法" class="headerlink" title="4. 奇数筛法"></a>4. 奇数筛法</h3><p>优化后的埃拉托斯特尼筛法，只筛选奇数。</p><p>cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OddSieve</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">2</span>) cout &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">isPrime</span><span class="params">((n + <span class="number">1</span>) / <span class="number">2</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i * i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i / <span class="number">2</span>]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i * i; j &lt;= n; j += <span class="number">2</span> * i) &#123;</span><br><span class="line">                isPrime[j / <span class="number">2</span>] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; <span class="number">2</span> * i + <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i]) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">2</span> * i + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">OddSieve</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-欧拉筛法（Euler-Sieve）"><a href="#5-欧拉筛法（Euler-Sieve）" class="headerlink" title="5. 欧拉筛法（Euler Sieve）"></a>5. 欧拉筛法（Euler Sieve）</h3><p>欧拉筛法是对埃拉托斯特尼筛法的优化，保证每个合数只被筛选一次。</p><p>cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EulerSieve</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">isPrime</span><span class="params">(n + <span class="number">1</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i]) &#123;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; primes.<span class="built_in">size</span>() &amp;&amp; i * primes[j] &lt;= n; ++j) &#123;</span><br><span class="line">            isPrime[i * primes[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> prime : primes) &#123;</span><br><span class="line">        cout &lt;&lt; prime &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">EulerSieve</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些方法各有优缺点，选择哪种方法取决于具体的应用场景和数据规模。</p>]]></content>
      
      
      <categories>
          
          <category> 算法方法论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方法论 </tag>
            
            <tag> 筛质数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解合集</title>
      <link href="/2024/10/12/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E9%A2%98%E8%A7%A3%E5%90%88%E9%9B%86/"/>
      <url>/2024/10/12/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E9%A2%98%E8%A7%A3%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="题解合集-2024年）"><a href="#题解合集-2024年）" class="headerlink" title="题解合集(2024年）"></a>题解合集(2024年）</h1><p>用于记录日常刷题练习的值得收藏的题,并给出题解</p><p>比赛等题目不在此贴记录,比赛题目另起一贴</p><hr><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><hr><h2 id="P1603-斯诺登的密码"><a href="#P1603-斯诺登的密码" class="headerlink" title="P1603 斯诺登的密码"></a><a href="https://www.luogu.com.cn/problem/P1603">P1603 斯诺登的密码</a></h2><p>2013 年 X 月 X 日，俄罗斯办理了斯诺登的护照，于是他混迹于一架开往委内瑞拉的飞机。但是，这件事情太不周密了，因为 FBI 的间谍早已获悉他的具体位置——但这不是最重要的——最重要的是如果要去委内瑞拉，那么就要经过古巴，而经过古巴的路在美国的掌控之中。</p><p>丧心病狂的奥巴马迫降斯诺登的飞机，搜查时却发现，斯诺登杳无踪迹。但是，在据说是斯诺登的座位上，发现了一张纸条。纸条由纯英文构成：<code>Obama is a two five zero.</code>（以 <code>.</code> 结束输出，只有 $6$ 个单词+一个句号，句子开头如没有大写亦为合法）这句话虽然有点无厘头，但是警官陈珺骛发现这是一条极其重要的线索。他在斯诺登截获的一台笔记本中找到了一个 C++ 程序，输入这条句子后立马给出了相对应的密码。陈珺鹜高兴得晕了过去，身为警官的你把字条和程序带上了飞机，准备飞往曼哈顿国际机场，但是在飞机上检查的时候发现——程序被粉碎了！飞机抵达华盛顿只剩 $5$ 分钟，你必须在这 $5$ 分钟内编写（杜撰）一个程序，免受上司的 $10000000000 \bmod 10$ 大板。破译密码的步骤如下：</p><p>（1）找出句子中所有用英文表示的数字 $(\leq 20)$，列举在下：</p><p>正规：<code>one two three four five six seven eight nine ten eleven twelve</code><br>           <code>thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty</code></p><p>非正规：<code>a both another first second third</code>。为避免造成歧义，<code>another</code> 算作 $1$ 处理。</p><p>（2）将这些数字平方后对 $100$ 取模，如 $00,05,11,19,86,99$。</p><p>（3）把这些两位数按数位排成一行，组成一个新数，如果开头为 $0$，就去 $0$。</p><p>（4）找出所有排列方法中最小的一个数，即为密码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//map打表</span></span><br><span class="line">map&lt;string,<span class="type">int</span>&gt;q;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;<span class="comment">//记录个数</span></span><br><span class="line"><span class="type">int</span> num[<span class="number">100</span>];<span class="comment">//数字存入数组</span></span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    q[<span class="string">&quot;one&quot;</span>]=<span class="number">1</span>;q[<span class="string">&quot;two&quot;</span>]=<span class="number">2</span>;q[<span class="string">&quot;three&quot;</span>]=<span class="number">3</span>;q[<span class="string">&quot;four&quot;</span>]=<span class="number">4</span>;q[<span class="string">&quot;five&quot;</span>]=<span class="number">5</span>;q[<span class="string">&quot;six&quot;</span>]=<span class="number">6</span>;q[<span class="string">&quot;seven&quot;</span>]=<span class="number">7</span>;q[<span class="string">&quot;eight&quot;</span>]=<span class="number">8</span>;q[<span class="string">&quot;nine&quot;</span>]=<span class="number">9</span>;q[<span class="string">&quot;ten&quot;</span>]=<span class="number">10</span>;</span><br><span class="line">    q[<span class="string">&quot;eleven&quot;</span>]=<span class="number">11</span>;q[<span class="string">&quot;twelve&quot;</span>]=<span class="number">12</span>;q[<span class="string">&quot;thirteen&quot;</span>]=<span class="number">13</span>;q[<span class="string">&quot;fourteen&quot;</span>]=<span class="number">14</span>;q[<span class="string">&quot;fifteen&quot;</span>]=<span class="number">15</span>;q[<span class="string">&quot;sixteen&quot;</span>]=<span class="number">16</span>;q[<span class="string">&quot;seventeen&quot;</span>]=<span class="number">17</span>;q[<span class="string">&quot;eighteen&quot;</span>]=<span class="number">18</span>;q[<span class="string">&quot;nineteen&quot;</span>]=<span class="number">19</span>;q[<span class="string">&quot;twenty&quot;</span>]=<span class="number">20</span>;</span><br><span class="line">    q[<span class="string">&quot;a&quot;</span>]=<span class="number">1</span>;q[<span class="string">&quot;both&quot;</span>]=<span class="number">2</span>;q[<span class="string">&quot;another&quot;</span>]=<span class="number">1</span>;q[<span class="string">&quot;first&quot;</span>]=<span class="number">1</span>;q[<span class="string">&quot;second&quot;</span>]=<span class="number">2</span>;q[<span class="string">&quot;third&quot;</span>]=<span class="number">3</span>;</span><br><span class="line">    <span class="comment">//打表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="keyword">if</span>(q[s])<span class="comment">//如果输入的单词对应map里面的数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=q[s]*q[s]%<span class="number">100</span>;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">continue</span>;<span class="comment">//如果计算出来为0则不存入</span></span><br><span class="line">            num[++cnt]=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(num<span class="number">+1</span>,num+cnt<span class="number">+1</span>);</span><br><span class="line">    cout&lt;&lt;num[<span class="number">1</span>];<span class="comment">//输入第一位不是两个字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//数字位数不足，则在前面补零</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02d&quot;</span>,num[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">24.11</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><hr><h2 id="P1553-数字反转（升级版）"><a href="#P1553-数字反转（升级版）" class="headerlink" title="P1553 数字反转（升级版）"></a><a href="https://www.luogu.com.cn/problem/P1553">P1553 数字反转（升级版）</a></h2><p><strong>题目描述</strong></p><p>给定一个数，请将该数各个位上数字反转得到一个新数。</p><p>这次与 NOIp2011 普及组第一题不同的是：这个数可以是小数，分数，百分数，整数。</p><ul><li><p>整数反转是将所有数位对调。</p></li><li><p>小数反转是把整数部分的数反转，再将小数部分的数反转，不交换整数部分与小数部分。</p></li><li><p>分数反转是把分母的数反转，再把分子的数反转，不交换分子与分母。</p></li><li><p>百分数的分子一定是整数，百分数只改变数字部分。</p></li></ul><h3 id="STL版"><a href="#STL版" class="headerlink" title="STL版"></a>STL版</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转函数并去掉前导0</span></span><br><span class="line"><span class="function">string <span class="title">reverse</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>) count++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清除前导0</span></span><br><span class="line">    s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">begin</span>()+count);</span><br><span class="line">    <span class="comment">//特判如果全是0则返回0</span></span><br><span class="line">    <span class="keyword">return</span> (s!=<span class="string">&quot;&quot;</span> ? s:<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">deleteTail</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = s.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>) count++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">erase</span>(s.<span class="built_in">end</span>()-count,s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//特判如果全是0则返回0</span></span><br><span class="line">    <span class="keyword">return</span> (s!=<span class="string">&quot;&quot;</span> ? s:<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="comment">//先判断第一种情况，最后是百分号的情况</span></span><br><span class="line">    <span class="comment">//back()函数返回字符串最后一个</span></span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">back</span>()==<span class="string">&#x27;%&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;s.substr(0,s.size()-1);</span></span><br><span class="line">        cout&lt;&lt;<span class="built_in">reverse</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>,s.<span class="built_in">size</span>()<span class="number">-1</span>))&lt;&lt;<span class="string">&quot;%&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到符号旁边的left和right</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>)&lt;s.<span class="built_in">size</span>())&#123;</span><br><span class="line">        string left,right;</span><br><span class="line">        left=s.<span class="built_in">substr</span>(<span class="number">0</span>,s.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        right=s.<span class="built_in">substr</span>(s.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>)<span class="number">+1</span>);</span><br><span class="line">        cout&lt;&lt;<span class="built_in">reverse</span>(left)&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;<span class="built_in">deleteTail</span>(<span class="built_in">reverse</span>(right));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s.<span class="built_in">find</span>(<span class="string">&quot;/&quot;</span>)&lt;s.<span class="built_in">size</span>())&#123;</span><br><span class="line">        string left,right;</span><br><span class="line">        left=s.<span class="built_in">substr</span>(<span class="number">0</span>,s.<span class="built_in">find</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        right=s.<span class="built_in">substr</span>(s.<span class="built_in">find</span>(<span class="string">&quot;/&quot;</span>)<span class="number">+1</span>);</span><br><span class="line">        cout&lt;&lt;<span class="built_in">reverse</span>(left)&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;<span class="built_in">reverse</span>(right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//整数</span></span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">reverse</span>(s);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1308-NOIP2011-普及组-统计单词数"><a href="#P1308-NOIP2011-普及组-统计单词数" class="headerlink" title="P1308 NOIP2011 普及组] 统计单词数"></a>P1308 <a href="https://www.luogu.com.cn/problem/P1308">NOIP2011 普及组] 统计单词数</a></h2><p>【题目描述】</p><p>一般的文本编辑器都有查找单词的功能，该功能可以快速定位特定单词在文章中的位置，有的还能统计出特定单词在文章中出现的次数。</p><p>现在，请你编程实现这一功能，具体要求是：给定一个单词，请你输出它在给定的文章中出现的次数和第一次出现的位置。注意：匹配单词时，不区分大小写，但要求完全匹配，即给定单词必须与文章中的某一独立单词在不区分大小写的情况下完全相同（参见样例 1），如果给定单词仅是文章中某一单词的一部分则不算匹配。</p><p>【输入格式】</p><p>共 $2$ 行。</p><p>第 $1$ 行为一个字符串，其中只含字母，表示给定单词；</p><p>第 $2$ 行为一个字符串，其中只可能包含字母和空格，表示给定的文章。</p><p>【输出格式】</p><p>一行，如果在文章中找到给定单词则输出两个整数，两个整数之间用一个空格隔开，分别是单词在文章中出现的次数和第一次出现的位置（即在文章中第一次出现时，单词首字母在文章中的位置，位置从 $0$ 开始）；如果单词在文章中没有出现，则直接输出一个整数 $-1$。</p><p>注意：空格占一个字母位</p><p>【样例输入】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">To</span><br><span class="line">to be or not to be is a question</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 0</span><br></pre></td></tr></table></figure><p>【提示】</p><p>数据范围</p><p>$1\leq $ 第一行单词长度 $\leq10$。</p><p>$1\leq $ 文章长度 $\leq10^6$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    <span class="built_in">getchar</span>();<span class="comment">//处理回车</span></span><br><span class="line">    <span class="comment">//输入一行</span></span><br><span class="line">    <span class="built_in">getline</span>(cin,b);</span><br><span class="line">    <span class="comment">//转换为小写</span></span><br><span class="line">    <span class="built_in">transform</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),a.<span class="built_in">begin</span>(),::tolower);</span><br><span class="line">    <span class="built_in">transform</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),b.<span class="built_in">begin</span>(),::tolower);</span><br><span class="line">    <span class="comment">//前后加空格方便查找</span></span><br><span class="line">    a=<span class="string">&quot; &quot;</span>+a+<span class="string">&quot; &quot;</span>;</span><br><span class="line">    b=<span class="string">&quot; &quot;</span>+b+<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="comment">//如果没有找到</span></span><br><span class="line">    <span class="keyword">if</span>(b.<span class="built_in">find</span>(a)==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//sum总个数，n查找第几个</span></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>,n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(b.<span class="built_in">find</span>(a,n)!=<span class="number">-1</span>) &#123;</span><br><span class="line">            sum++;</span><br><span class="line">            n=b.<span class="built_in">find</span>(a,n)<span class="number">+1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;sum&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b.<span class="built_in">find</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P5734-【深基6-例6】文字处理软件"><a href="#P5734-【深基6-例6】文字处理软件" class="headerlink" title="P5734 【深基6.例6】文字处理软件"></a><a href="https://www.luogu.com.cn/problem/P5734">P5734 【深基6.例6】文字处理软件</a></h2><p>【题目描述】</p><p>你需要开发一款文字处理软件。最开始时输入一个字符串作为初始文档。可以认为文档开头是第 $0$ 个字符。需要支持以下操作：</p><ul><li><code>1 str</code>：后接插入，在文档后面插入字符串 $\texttt{str}$，并输出文档的字符串；</li><li><code>2 a b</code>：截取文档部分，只保留文档中从第 $a$ 个字符起 $b$ 个字符，并输出文档的字符串；</li><li><code>3 a str</code>：插入片段，在文档中第 $a$ 个字符前面插入字符串 $\texttt{str}$，并输出文档的字符串；</li><li><code>4 str</code>：查找子串，查找字符串 $\texttt{str}$ 在文档中最先的位置并输出；如果找不到输出 $-1$。</li></ul><p>为了简化问题，规定初始的文档和每次操作中的 $\texttt{str}$ 都不含有空格或换行。最多会有 $q$ 次操作。</p><p>【输入格式】</p><p>第一行输入一个正整数 $q$，表示操作次数。</p><p>第二行输入一个字符串 $\texttt{str}$，表示最开始的字符串。</p><p>第三行开始，往下 $q$ 行，每行表示一个操作，操作如题目描述所示。</p><p>【输出格式】</p><p>一共输出 $q$ 行。</p><p>对于每个操作 $1,2,3$，根据操作的要求输出一个字符串。</p><p>对于操作 $4$，根据操作的要求输出一个整数。</p><p>【提示】</p><p>数据保证，$1 \leq q\le 100$，开始的字符串长度 $\leq 100$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,opt;<span class="comment">//n操作次数，opt选择操作</span></span><br><span class="line">string ans,a1;<span class="comment">//ans原始字符串和最后的答案</span></span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin&gt;&gt;opt;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;a1;</span><br><span class="line">            <span class="comment">//在后面增加字符串直接用+</span></span><br><span class="line">            ans+=a1;</span><br><span class="line">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            <span class="comment">//substr(a,b)对字符串从a截取到b</span></span><br><span class="line">            a1=ans.<span class="built_in">substr</span>(a,b);</span><br><span class="line">            ans=a1;</span><br><span class="line">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>) &#123;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;a1;</span><br><span class="line">            <span class="comment">//insert(a,a1)从字符串的a位置插入字符串a1</span></span><br><span class="line">            ans.<span class="built_in">insert</span>(a,a1);</span><br><span class="line">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>) &#123;</span><br><span class="line">            cin&gt;&gt;a1;</span><br><span class="line">            <span class="comment">//find(a1)找到a1的位置，如果没有找到，find返回的数会大于size</span></span><br><span class="line">            <span class="keyword">if</span>(ans.<span class="built_in">find</span>(a1)&lt;ans.<span class="built_in">size</span>())</span><br><span class="line">                cout&lt;&lt;ans.<span class="built_in">find</span>(a1)&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1957-口算练习题"><a href="#P1957-口算练习题" class="headerlink" title="P1957 口算练习题"></a><a href="https://www.luogu.com.cn/problem/P1957">P1957 口算练习题</a></h2><p>王老师正在教简单算术运算。细心的王老师收集了 $i$ 道学生经常做错的口算题，并且想整理编写成一份练习。 编排这些题目是一件繁琐的事情，为此他想用计算机程序来提高工作效率。王老师希望尽量减少输入的工作量，比如 $\texttt{5+8}$ 的算式最好只要输入 $\texttt 5$ 和 $\texttt 8$，输出的结果要尽量详细以方便后期排版的使用，比如对于上述输入进行处理后输出 $\texttt{5+8&#x3D;13}$ 以及该算式的总长度 $6$。王老师把这个光荣的任务交给你，请你帮他编程实现以上功能。</p><p>【输入格式】</p><p>第一行一个整数 $i$。</p><p>接着的 $i$ 行为需要输入的算式，每行可能有三个数据或两个数据。</p><p>若该行为三个数据则第一个数据表示运算类型，$\texttt a$ 表示加法运算，$\texttt b$ 表示减法运算，$\texttt c$ 表示乘法运算，接着的两个数据表示参加运算的运算数。</p><p>若该行为两个数据，则表示本题的运算类型与上一题的运算类型相同，而这两个数据为运算数。</p><p>【输出格式】</p><p>输出 $2\times i$ 行。对于每个输入的算式，输出完整的运算式及结果，第二行输出该运算式的总长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">a 64 46</span><br><span class="line">275 125</span><br><span class="line">c 11 99</span><br><span class="line">b 46 64</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">64+46=110</span><br><span class="line">9</span><br><span class="line">275+125=400</span><br><span class="line">11</span><br><span class="line">11*99=1089</span><br><span class="line">10</span><br><span class="line">46-64=-18</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>【数据规模与约定】</p><p>对于 $50%$ 的数据，输入的算式都有三个数据，第一个算式一定有三个数据。</p><p>对于所有数据，$0&lt;i\leq 50$，运算数为非负整数且小于 $10000$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/std++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a,s[<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;,b[<span class="number">10</span>];<span class="comment">//s数组储存全部字符，b数组储存第一个输入，a记录运算符</span></span><br><span class="line"><span class="type">int</span> c,d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;b;</span><br><span class="line">        <span class="comment">//判断输入的是字母还是数字</span></span><br><span class="line">        <span class="keyword">if</span>(b[<span class="number">0</span>]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;b[<span class="number">0</span>]&lt;=<span class="string">&#x27;c&#x27;</span>)&#123;</span><br><span class="line">            a=b[<span class="number">0</span>];</span><br><span class="line">            cin&gt;&gt;c&gt;&gt;d;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">sscanf</span>(b,<span class="string">&quot;%d&quot;</span>,&amp;c);</span><br><span class="line">            cin&gt;&gt;d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//格式化输出</span></span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            <span class="built_in">sprintf</span>(s,<span class="string">&quot;%d+%d=%d&quot;</span>,c,d,c+d);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">            <span class="built_in">sprintf</span>(s,<span class="string">&quot;%d-%d=%d&quot;</span>,c,d,c-d);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">            <span class="built_in">sprintf</span>(s,<span class="string">&quot;%d*%d=%d&quot;</span>,c,d,c*d);</span><br><span class="line">        cout&lt;&lt;s&lt;&lt;endl&lt;&lt;<span class="built_in">strlen</span>(s)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><hr><h2 id="P5725【深基4-习8】求三角形"><a href="#P5725【深基4-习8】求三角形" class="headerlink" title="P5725【深基4.习8】求三角形"></a><a href="(https://www.luogu.com.cn/problem/P5725)">P5725</a>【深基4.习8】求三角形</h2><p>模仿例题，打印出不同方向的正方形，然后打印三角形矩阵。中间有个空行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">01020304</span><br><span class="line">05060708</span><br><span class="line">09101112</span><br><span class="line">13141516</span><br><span class="line"></span><br><span class="line">      01</span><br><span class="line">    0203</span><br><span class="line">  040506</span><br><span class="line">07080910</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line"><span class="comment">//当前的数字cnt</span></span><br><span class="line"><span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//打印正方形</span></span><br><span class="line"><span class="comment">//行数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02d&quot;</span>,cnt);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="comment">//打印三角形</span></span><br><span class="line"><span class="comment">//当前的数字cnt</span></span><br><span class="line">cnt=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//当前要打印的数字的个数num1</span></span><br><span class="line"><span class="type">int</span> num1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//记录空格数，每个数字占两格，空格数为n*2-数字个数num1*2</span></span><br><span class="line"><span class="type">int</span> kg=num1*<span class="number">2</span>;</span><br><span class="line"><span class="comment">//打印空格，j=kg除去了数字占用的位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = kg; j &lt; n*<span class="number">2</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义num用于while</span></span><br><span class="line"><span class="type">int</span> num=num1;</span><br><span class="line"><span class="keyword">while</span> (num--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02d&quot;</span>,cnt);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下次要打印的数字的个数加一</span></span><br><span class="line">num1++;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//24.10.24</span></span><br></pre></td></tr></table></figure><hr><h2 id="P1720-月落乌啼算钱（斐波那契数列）"><a href="#P1720-月落乌啼算钱（斐波那契数列）" class="headerlink" title="P1720 月落乌啼算钱（斐波那契数列）"></a><a href="https://www.luogu.com.cn/problem/P1720">P1720</a> 月落乌啼算钱（斐波那契数列）</h2><p>算完钱后，月落乌啼想着：“你坑我！”于是当爱与愁大神问多少钱时，月落乌啼说了一堆乱码。爱与愁大神说：“算了算了，我只问第 $n$ 样菜价格多少？”月落乌啼写出了：</p><p>$$F_n&#x3D;\dfrac{\left(\frac{1+\sqrt{5}}{2}\right)^n-\left(\frac{1-\sqrt{5}}{2}\right)^n}{\sqrt{5}}$$</p><p>由于爱与愁大神学过编程，于是就用 $1$ 分钟的时间求出了 $F_n$ 的结果。月落乌啼为此大吃一惊。你能学学爱与愁大神求出 $F_n$ 的值吗？</p><p>对于所有数据：$0 \leq n\leq 48$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">f1=<span class="number">1</span>;</span><br><span class="line">f2=<span class="number">1</span>;</span><br><span class="line">f3=<span class="number">2</span>;</span><br><span class="line">f4=<span class="number">3</span>;</span><br><span class="line">f5=<span class="number">5</span>;</span><br><span class="line">fn=f[n<span class="number">-1</span>]+f[n<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//题解一</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a=<span class="number">1</span>,b=<span class="number">1</span>,c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    c=a+b;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;c&lt;&lt;<span class="string">&quot;.00&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//题解二</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> f[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">2</span>]=<span class="number">1</span>;   <span class="comment">//递归边界条件</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">    f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];  <span class="comment">//开始使用斐波那契数列</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%0.2f&quot;</span>,f[n]); <span class="comment">//输出，保留两位小数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1075-NOIP2012-普及组-质因数分解"><a href="#P1075-NOIP2012-普及组-质因数分解" class="headerlink" title="P1075 [NOIP2012 普及组] 质因数分解"></a><a href="(https://www.luogu.com.cn/problem/P1075)">P1075</a> [NOIP2012 普及组] 质因数分解</h2><p>已知正整数 $n$ 是两个不同的质数的乘积，试求出两者中较大的那个质数。</p><p>$1 \le n\le 2\times 10^9$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">//满足要求的数有且只有一组质数相乘等于这个数，找出一个质数，就可以知道另一个质数</span></span><br><span class="line">    <span class="comment">//找到第一个小的质数，那么另一个大的质数就是n/这个质数了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;n/i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//24.10.24</span></span><br></pre></td></tr></table></figure><hr><h2 id="P2669-NOIP2015-普及组-金币"><a href="#P2669-NOIP2015-普及组-金币" class="headerlink" title="P2669 [NOIP2015 普及组] 金币"></a><a href="https://www.luogu.com.cn/problem/P2669">P2669</a> [NOIP2015 普及组] 金币</h2><p>国王将金币作为工资，发放给忠诚的骑士。第一天，骑士收到一枚金币；之后两天（第二天和第三天），每天收到两枚金币；之后三天（第四、五、六天），每天收到三枚金币；之后四天（第七、八、九、十天），每天收到四枚金币……；这种工资发放模式会一直这样延续下去：当连续 $n$ 天每天收到 $n$ 枚金币后，骑士会在之后的连续 $n+1$ 天里，每天收到 $n+1$ 枚金币。</p><p>请计算在前 $k$ 天里，骑士一共获得了多少金币。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 输入格式</span><br><span class="line">一个正整数 $k$，表示发放金币的天数。</span><br><span class="line">## 输出格式</span><br><span class="line">一个正整数，即骑士收到的金币数。</span><br></pre></td></tr></table></figure><p>骑士第一天收到一枚金币；第二天和第三天，每天收到两枚金币；第四、五、六天，每天收到三枚金币。因此一共收到 $1+2+2+3+3+3&#x3D;14$ 枚金币。</p><p>对于 $100%$ 的数据，$1\le k\le 10^4$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//题解一</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b=<span class="number">0</span>,c=<span class="number">1</span>,i;<span class="comment">//a为天数，b为金币，c为每天比原来每天多获得的金币数 </span></span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">a-=i,b+=c*c,c++;<span class="comment">//金币每天加上c的2次方，天数当然要减i了</span></span><br><span class="line">cout&lt;&lt;b+a*c;<span class="comment">//最后算上剩余的a乘加的最多一次的c</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//24.10.22 没看懂</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//题解二</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//k为发放金币的天数</span></span><br><span class="line">   <span class="comment">//day为往后数day天获得的金币为money个</span></span><br><span class="line">   <span class="comment">//sum获得金币的总数</span></span><br><span class="line">   <span class="comment">//money：每天能获得的金币数量</span></span><br><span class="line">   <span class="type">int</span> k,day,sum=<span class="number">0</span>,money;</span><br><span class="line">   cin&gt;&gt;k;</span><br><span class="line">   day=money=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)<span class="comment">//要发k天金币</span></span><br><span class="line">   &#123;</span><br><span class="line">      sum+=money;</span><br><span class="line">      day--;<span class="comment">//已经发了一天金币</span></span><br><span class="line">      <span class="keyword">if</span>(day==<span class="number">0</span>)&#123;</span><br><span class="line">         money++;<span class="comment">//进入下一个周期前，金币数加一</span></span><br><span class="line">         day=money;<span class="comment">//如果该周期发完了则进入下一个周期，每天发money个金币</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;sum;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//24.10.22</span></span><br></pre></td></tr></table></figure><hr><h2 id="【筛质数】-P5723-【深基4-例13】质数口袋"><a href="#【筛质数】-P5723-【深基4-例13】质数口袋" class="headerlink" title="【筛质数】 P5723 【深基4.例13】质数口袋"></a>【筛质数】 <a href="https://www.luogu.com.cn/problem/P5723">P5723</a> 【深基4.例13】质数口袋</h2><p>小 A 有一个质数口袋，里面可以装各个质数。他从 $2$ 开始，依次判断各个自然数是不是质数，如果是质数就会把这个数字装入口袋。</p><p>口袋的负载量就是口袋里的所有数字之和。</p><p>但是口袋的承重量有限，装的质数的和不能超过 $L$。给出 $L$，请问口袋里能装下几个质数？将这些质数从小往大输出，然后输出最多能装下的质数的个数，数字之间用换行隔开。</p><p>数据保证，$1 \le L \le {10}^5$。</p><h3 id="筛法合集"><a href="#筛法合集" class="headerlink" title="筛法合集"></a>筛法合集</h3><ul><li><strong>枚举法（试除法）</strong></li><li><strong>埃拉托斯特尼筛法（Sieve of Eratosthenes）</strong></li><li><strong>线性筛法（Linear Sieve）</strong></li><li><strong>奇数筛法</strong></li><li><strong>欧拉筛法（Euler Sieve）</strong></li></ul><p>前置题：<a href="https://www.luogu.com.cn/problem/P3383">P3383 【模板】线性筛素数</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,x;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i*i&lt;=y; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(y%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2\n1\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;i!=<span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(sum+i&gt;n) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(i)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">sum+=i;</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//24.10.22 未看懂</span></span><br></pre></td></tr></table></figure><ul><li>用埃氏筛筛出100000以内的质数以备用。</li><li>输入完之后，从最小的质数开始，然后第2小，第3小……由小往大，只要是质数都取，一直取到和超过𝐿<em>L</em>为止。</li></ul><p>时间复杂度$Θ(𝑛log⁡log⁡𝑛)$，当$n$取到最大的100000时，也就Θ(70000)左右，足以通过本题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> prime[<span class="number">100000</span>];</span><br><span class="line"><span class="type">int</span> cnt,L;</span><br><span class="line"></span><br><span class="line"><span class="comment">//埃氏筛</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ai</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100000</span>;++i)&#123;</span><br><span class="line">      <span class="keyword">if</span>(prime[i])</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> j=i*<span class="number">2</span>;j&lt;=<span class="number">100000</span>;j+=i)</span><br><span class="line">            prime[j]=<span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   cin&gt;&gt;L;</span><br><span class="line">   <span class="built_in">memset</span>(prime,<span class="number">1</span>,<span class="built_in">sizeof</span>(prime));<span class="comment">//初始化数组</span></span><br><span class="line">   <span class="built_in">ai</span>();</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;=L; ++i)&#123;</span><br><span class="line">      <span class="keyword">if</span>(prime[i])&#123;</span><br><span class="line">         cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">         cnt++;</span><br><span class="line">         L -= i;<span class="comment">//质数的总和小于L</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;cnt;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//24.10.22</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 日常刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL标准模板库笔记</title>
      <link href="/2024/10/12/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/STL%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/10/12/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/STL%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="STL标准模板库"><a href="#STL标准模板库" class="headerlink" title="STL标准模板库"></a>STL标准模板库</h1><h2 id="STL-概念"><a href="#STL-概念" class="headerlink" title="STL 概念"></a>STL 概念</h2><p>STL（标准模板库）是C++标准库的重要组成部分，它提供了一系列常用的数据结构和算法，极大地丰富了C++的功能。STL主要包含以下几个部分：</p><h3 id="一、容器（Containers）"><a href="#一、容器（Containers）" class="headerlink" title="一、容器（Containers）"></a>一、容器（Containers）</h3><p>STL提供了多种容器，每种容器都有其特定的用途和性能特征。常见的容器包括：</p><ol><li><strong>vector</strong>：动态数组，支持快速随机访问和尾部插入删除。</li><li><strong>deque</strong>：双端队列，支持快速随机访问和两端插入删除。</li><li><strong>list</strong>：双向链表，支持双向遍历和任意位置插入删除。</li><li><strong>forward_list</strong>：单向链表，支持单向遍历和任意位置插入删除。</li><li><strong>set</strong>：有序集合，元素唯一且自动排序。</li><li><strong>multiset</strong>：有序多重集合，元素可以重复且自动排序。</li><li><strong>map</strong>：有序映射，键值对集合，键唯一且自动排序。</li><li><strong>multimap</strong>：有序多重映射，键可以重复且自动排序。</li><li><strong>unordered_set</strong>：无序集合，元素唯一，无序存储。</li><li><strong>unordered_multiset</strong>：无序多重集合，元素可以重复，无序存储。</li><li><strong>unordered_map</strong>：无序映射，键值对集合，键唯一，无序存储。</li><li><strong>unordered_multimap</strong>：无序多重映射，键可以重复，无序存储。</li></ol><p>此外，STL还提供了基于容器的适配器，如栈（stack）、队列（queue）和优先队列（priority_queue），它们分别基于deque、list或vector等容器实现。</p><h3 id="二、迭代器（Iterators）"><a href="#二、迭代器（Iterators）" class="headerlink" title="二、迭代器（Iterators）"></a>二、迭代器（Iterators）</h3><p>迭代器是一种广义指针，提供了对容器和容器元素的通用访问方法。STL中的算法通过迭代器来操作容器，将算法与特定容器的实现解耦。迭代器分为以下几类：</p><ol><li><strong>输入迭代器</strong>：只读访问容器中的元素，支持单向遍历。</li><li><strong>输出迭代器</strong>：只能写入元素，不能读取，支持单向遍历。</li><li><strong>前向迭代器</strong>：支持只读或读写访问，支持单向遍历，允许多次遍历相同的元素。</li><li><strong>双向迭代器</strong>：支持双向遍历，既可以向前遍历，也可以向后遍历。</li><li><strong>随机访问迭代器</strong>：支持随机访问，可以直接跳转到容器中的任意元素，是功能最强的迭代器类型。</li></ol><h3 id="三、算法（Algorithms）"><a href="#三、算法（Algorithms）" class="headerlink" title="三、算法（Algorithms）"></a>三、算法（Algorithms）</h3><p>STL提供了大量的算法，涵盖了排序、搜索、数值操作、生成和修改序列等常见任务。这些算法可以直接应用于容器，也可以通过迭代器应用于数组或其他数据结构。常见的算法包括：</p><ol><li><strong>查找和排序</strong>：如find、count、sort、binary_search、merge等。</li><li><strong>修改和操作</strong>：如copy、transform、replace、fill、swap、reverse等。</li><li><strong>数值操作</strong>：如accumulate、inner_product、partial_sum、adjacent_difference等。</li></ol><h3 id="四、函数对象（Function-Objects）"><a href="#四、函数对象（Function-Objects）" class="headerlink" title="四、函数对象（Function Objects）"></a>四、函数对象（Function Objects）</h3><p>函数对象（Functors）是可以像函数一样调用的对象，它们可以作为算法的参数传递，用于自定义操作。STL提供了多个内置的函数对象，如比较器（less、greater）、算术操作（plus、minus）、逻辑操作（logical_and、logical_or）等。</p><h3 id="五、适配器（Adapters）"><a href="#五、适配器（Adapters）" class="headerlink" title="五、适配器（Adapters）"></a>五、适配器（Adapters）</h3><p>适配器提供了对现有组件的重新包装，使其能够符合不同的接口需求。STL中常见的适配器包括容器适配器（如stack、queue、priority_queue）和迭代器适配器（如reverse_iterator）。</p><p>综上所述，STL是一个功能强大且灵活的库，它提供了丰富的数据结构和算法，使得C++程序员能够更加方便地编写高效、可重用的代码。</p><hr><h2 id="STL详细功能表示"><a href="#STL详细功能表示" class="headerlink" title="STL详细功能表示"></a>STL详细功能表示</h2><p>STL（Standard Template Library，标准模板库）是C++的一个重要组成部分，提供了许多常用的数据结构和算法。以下是一些STL中常用的操作，涵盖了容器、迭代器和算法等方面：</p><h3 id="一、容器常用操作"><a href="#一、容器常用操作" class="headerlink" title="一、容器常用操作"></a>一、容器常用操作</h3><h4 id="1-vector（向量）"><a href="#1-vector（向量）" class="headerlink" title="1. vector（向量）"></a>1. vector（向量）</h4><ul><li><strong>声明</strong>：<code>vector&lt;int&gt; vec;</code> 或 <code>vector&lt;int&gt; vec(100, 2);</code>（声明含有100个元素，初值为2的int型vector对象）</li><li><strong>插入</strong>：<code>vec.push_back(1);</code> 在向量末尾插入元素。<code>vec.insert(vec.begin()+i, 1);</code> 在指定位置插入元素。</li><li><strong>删除</strong>：<code>vec.erase(vec.begin()+2);</code> 删除指定位置的元素。<code>vec.erase(vec.begin()+i, vec.begin()+j);</code> 删除区间内的元素。</li><li><strong>访问</strong>：<code>vec[i];</code> 使用下标访问元素。或使用迭代器访问。</li><li><strong>其他</strong>：<code>vec.size();</code> 求向量大小。<code>vec.clear();</code> 清空向量。<code>vec.empty();</code> 判断向量是否为空。</li></ul><h4 id="2-deque（双端队列）"><a href="#2-deque（双端队列）" class="headerlink" title="2. deque（双端队列）"></a>2. deque（双端队列）</h4><ul><li><strong>插入</strong>：<code>push_back(elem);</code> 在容器尾部添加一个数据。<code>push_front(elem);</code> 在容器头部插入一个数据。</li><li><strong>删除</strong>：<code>pop_back(elem);</code> 在容器尾部删除一个数据。<code>pop_front(elem);</code> 在容器头部删除一个数据。</li><li><strong>其他</strong>：与vector类似，支持<code>insert</code>、<code>erase</code>、<code>size</code>、<code>empty</code>等操作。</li></ul><h4 id="3-set（集合）"><a href="#3-set（集合）" class="headerlink" title="3. set（集合）"></a>3. set（集合）</h4><ul><li><strong>插入</strong>：<code>insert(elem);</code> 插入元素。</li><li><strong>查找</strong>：<code>find(elem);</code> 查找元素。</li><li><strong>删除</strong>：<code>remove(elem);</code> 删除元素。</li><li><strong>其他</strong>：<code>count(elem);</code> 统计元素出现的次数（set中只有0和1两种可能）。<code>set::iterator</code> 迭代器用于遍历集合。</li></ul><h4 id="4-map（映射）"><a href="#4-map（映射）" class="headerlink" title="4. map（映射）"></a>4. map（映射）</h4><ul><li><strong>插入</strong>：<code>insert(pair&lt;K, V&gt;);</code> 插入键值对。或使用<code>m[key] = value;</code>的方式插入。</li><li><strong>查找</strong>：<code>find(key);</code> 查找键对应的值。</li><li><strong>删除</strong>：<code>remove(key);</code> 删除键对应的键值对。</li><li><strong>其他</strong>：<code>count(key);</code> 统计键出现的次数（map中只有0和1两种可能）。<code>map::iterator</code> 迭代器用于遍历映射。</li></ul><h4 id="5-stack（栈）"><a href="#5-stack（栈）" class="headerlink" title="5. stack（栈）"></a>5. stack（栈）</h4><ul><li><strong>插入</strong>：<code>push(elem);</code> 在栈顶插入元素。</li><li><strong>删除</strong>：<code>pop();</code> 删除栈顶元素。</li><li><strong>访问</strong>：<code>top();</code> 获取栈顶元素的值。</li><li><strong>其他</strong>：<code>size();</code> 求栈的大小。<code>empty();</code> 判断栈是否为空。</li></ul><h4 id="6-queue（队列）"><a href="#6-queue（队列）" class="headerlink" title="6. queue（队列）"></a>6. queue（队列）</h4><ul><li><strong>插入</strong>：<code>push(elem);</code> 在队尾插入元素。</li><li><strong>删除</strong>：<code>pop();</code> 删除队头元素。</li><li><strong>访问</strong>：<code>front();</code> 获取队头元素的值。<code>back();</code> 获取队尾元素的值。</li><li><strong>其他</strong>：<code>size();</code> 求队列大小。<code>empty();</code> 判断队列是否为空。</li></ul><h4 id="7-priority-queue（优先队列）"><a href="#7-priority-queue（优先队列）" class="headerlink" title="7. priority_queue（优先队列）"></a>7. priority_queue（优先队列）</h4><ul><li><strong>插入</strong>：<code>push(elem);</code> 在堆内插入元素且仍保持堆的结构。</li><li><strong>删除</strong>：<code>pop();</code> 弹出堆顶元素。</li><li><strong>访问</strong>：<code>top();</code> 获取堆顶元素的值。</li><li><strong>其他</strong>：可以通过指定比较函数或仿函数来改变元素的优先级顺序。</li></ul><h3 id="二、迭代器常用操作"><a href="#二、迭代器常用操作" class="headerlink" title="二、迭代器常用操作"></a>二、迭代器常用操作</h3><ul><li><strong>迭代器类型</strong>：包括输入迭代器、输出迭代器、前向迭代器、双向迭代器和随机访问迭代器。</li><li><strong>基本操作</strong>：<code>++it;</code> 或 <code>it++;</code> 使迭代器指向下一个元素。<code>--it;</code> 或 <code>it--;</code>（仅双向和随机访问迭代器支持）使迭代器指向前一个元素。<code>*it;</code> 解引用迭代器，获取其指向的元素的值。</li><li><strong>高级操作</strong>：<code>std::advance(it, n);</code> 将迭代器向前移动n个位置。<code>std::prev(it);</code> 获取迭代器的前一个位置（仅双向和随机访问迭代器支持）。<code>std::next(it);</code> 获取迭代器的下一个位置。</li></ul><h3 id="三、算法常用操作"><a href="#三、算法常用操作" class="headerlink" title="三、算法常用操作"></a>三、算法常用操作</h3><ul><li><strong>排序</strong>：<code>sort(a.begin(), a.end());</code> 对容器中的元素进行排序。</li><li><strong>查找</strong>：<code>find(a.begin(), a.end(), value);</code> 在容器中查找等于value的元素。</li><li><strong>搜索</strong>：<code>search(a.begin(), a.end(), b.begin(), b.end());</code> 在容器a中查找子序列b。</li><li><strong>替换</strong>：<code>replace(a.begin(), a.end(), value1, value2);</code> 将容器中等于value1的元素替换为value2。</li><li><strong>数值算法</strong>：如<code>equal</code>、<code>includes</code>、<code>max_element</code>、<code>min_element</code>等，用于比较和查找容器中的元素。</li></ul><h3 id="四、其他常用操作"><a href="#四、其他常用操作" class="headerlink" title="四、其他常用操作"></a>四、其他常用操作</h3><ul><li><strong>字符串操作</strong>：如<code>str.insert(pos, &quot;abc&quot;);</code> 在字符串中插入子串。<code>str.erase(pos, n);</code> 删除字符串中的部分字符。<code>str.find(&#39;A&#39;);</code> 查找字符在字符串中的位置。</li><li><strong>内存操作</strong>：如<code>memset(f, -1, sizeof(f));</code> 将某一块内存全部填充为指定的值。</li></ul><p>以上只是STL中常用操作的一部分，STL还提供了许多其他功能强大的数据结构和算法，可以根据具体需求进行选择和使用。</p><hr><h2 id="map容器"><a href="#map容器" class="headerlink" title="map容器"></a>map容器</h2><p>在C++的标准模板库（STL）中，<code>map</code> 是一种关联容器，它存储的是键值对（key-value pairs），其中每个键（key）都是唯一的，并且与一个值（value）相关联。<code>map</code> 容器内部通常通过红黑树（一种自平衡二叉搜索树）来实现，这意味着它具有对数时间复杂度的查找、插入和删除操作。</p><p><code>map</code> 的键和值可以是任何可以复制的类型，但键类型必须支持 <code>&lt;</code> 运算符来进行比较，以便 <code>map</code> 能够根据键的顺序来组织数据。默认情况下，<code>map</code> 是按键的升序排列的。</p><p>以下是一些 <code>map</code> 的基本用法示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的 map，键是 std::string 类型，值是 int 类型</span></span><br><span class="line">    std::map&lt;std::string, <span class="type">int</span>&gt; myMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入键值对</span></span><br><span class="line">    myMap[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">    myMap[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">    myMap[<span class="string">&quot;three&quot;</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;The number for &#x27;one&#x27; is &quot;</span> &lt;&lt; myMap[<span class="string">&quot;one&quot;</span>] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历 map</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; pair : myMap) &#123;</span><br><span class="line">        std::cout &lt;&lt; pair.first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; pair.second &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找元素</span></span><br><span class="line">    <span class="keyword">auto</span> it = myMap.<span class="built_in">find</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != myMap.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Found &#x27;two&#x27; with value &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;&#x27;two&#x27; not found in map&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    myMap.<span class="built_in">erase</span>(<span class="string">&quot;three&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查元素是否存在（另一种方式）</span></span><br><span class="line">    <span class="keyword">if</span> (myMap.<span class="built_in">count</span>(<span class="string">&quot;one&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;&#x27;one&#x27; exists in map&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 map 的大小</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Size of map: &quot;</span> &lt;&lt; myMap.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们创建了一个 <code>std::map&lt;std::string, int&gt;</code> 类型的 <code>myMap</code>，然后插入了一些键值对。我们使用下标运算符 <code>[]</code> 来访问和修改元素，使用范围 for 循环来遍历整个 <code>map</code>，使用 <code>find</code> 方法来查找元素，使用 <code>erase</code> 方法来删除元素，以及使用 <code>count</code> 方法来检查元素是否存在。最后，我们使用 <code>size</code> 方法来获取 <code>map</code> 的大小。</p><p>请注意，当使用下标运算符 <code>[]</code> 访问 <code>map</code> 中的元素时，如果键不存在，<code>map</code> 会自动创建一个新的键值对，并将值初始化为默认值（对于基本类型，如 <code>int</code>，默认值是 <code>0</code>）。如果你不想在键不存在时创建新的键值对，应该使用 <code>find</code> 方法来检查键是否存在。</p><hr><h2 id="string字符串"><a href="#string字符串" class="headerlink" title="string字符串"></a>string字符串</h2><p>下面是一些关于C++标准模板库（STL）中<code>std::string</code>类的常用函数笔记。<code>std::string</code>类是用于表示和操作字符串的类，提供了丰富的成员函数来进行字符串的创建、访问、修改、查询等操作。</p><h3 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h3><ul><li><p><strong>默认构造函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::string str; <span class="comment">// 创建一个空字符串</span></span><br></pre></td></tr></table></figure></li><li><p><strong>用C风格字符串构造</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">str</span><span class="params">(<span class="string">&quot;Hello, World!&quot;</span>)</span></span>; <span class="comment">// 使用C风格字符串初始化</span></span><br></pre></td></tr></table></figure></li><li><p><strong>用字符数组和长度构造</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c_str[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="function">std::string <span class="title">str</span><span class="params">(c_str, <span class="number">5</span>)</span></span>; <span class="comment">// 使用字符数组的前5个字符初始化</span></span><br></pre></td></tr></table></figure></li><li><p><strong>用单个字符重复n次构造</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">str</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>; <span class="comment">// 创建一个字符串 &quot;aaaaa&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>用另一个<code>std::string</code>对象构造</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">str1</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">str2</span><span class="params">(str1)</span></span>; <span class="comment">// 使用str1初始化str2</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-访问与修改"><a href="#2-访问与修改" class="headerlink" title="2. 访问与修改"></a>2. 访问与修改</h3><ul><li><p><strong>访问单个字符</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch = str[<span class="number">0</span>]; <span class="comment">// 访问第一个字符</span></span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>; <span class="comment">// 修改第一个字符</span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取字符串的C风格表示</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* c_str = str.<span class="built_in">c_str</span>(); <span class="comment">// 获取C风格字符串（以null结尾）</span></span><br></pre></td></tr></table></figure></li><li><p><strong>字符串拼接</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str += <span class="string">&quot; World!&quot;</span>; <span class="comment">// 追加字符串</span></span><br><span class="line">str.<span class="built_in">append</span>(<span class="string">&quot; C++&quot;</span>); <span class="comment">// 使用append函数追加字符串</span></span><br></pre></td></tr></table></figure></li><li><p><strong>替换子字符串</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">replace</span>(<span class="number">0</span>, <span class="number">5</span>, <span class="string">&quot;Hi&quot;</span>); <span class="comment">// 将前5个字符替换为&quot;Hi&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>插入子字符串</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">insert</span>(<span class="number">5</span>, <span class="string">&quot; Inserted&quot;</span>); <span class="comment">// 在索引5处插入字符串</span></span><br></pre></td></tr></table></figure></li><li><p><strong>删除子字符串</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">erase</span>(<span class="number">5</span>, <span class="number">6</span>); <span class="comment">// 删除从索引5开始的6个字符</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-查询"><a href="#3-查询" class="headerlink" title="3. 查询"></a>3. 查询</h3><ul><li><p><strong>获取字符串长度</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> len = str.<span class="built_in">length</span>(); <span class="comment">// 获取字符串长度</span></span><br></pre></td></tr></table></figure></li><li><p><strong>检查是否为空</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> isEmpty = str.<span class="built_in">empty</span>(); <span class="comment">// 检查字符串是否为空</span></span><br></pre></td></tr></table></figure></li><li><p><strong>查找子字符串</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> pos = str.<span class="built_in">find</span>(<span class="string">&quot;World&quot;</span>); <span class="comment">// 查找子字符串位置</span></span><br></pre></td></tr></table></figure></li><li><p><strong>子字符串查找（从指定位置开始）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> pos = str.<span class="built_in">find</span>(<span class="string">&quot;World&quot;</span>, <span class="number">6</span>); <span class="comment">// 从索引6开始查找子字符串位置</span></span><br></pre></td></tr></table></figure></li><li><p><strong>查找字符</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> pos = str.<span class="built_in">find</span>(<span class="string">&#x27;o&#x27;</span>); <span class="comment">// 查找字符位置</span></span><br></pre></td></tr></table></figure></li><li><p><strong>反向查找</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> rpos = str.<span class="built_in">rfind</span>(<span class="string">&quot;World&quot;</span>); <span class="comment">// 反向查找子字符串位置</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-字符串比较"><a href="#4-字符串比较" class="headerlink" title="4. 字符串比较"></a>4. 字符串比较</h3><ul><li><p><strong>相等比较</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> isEqual = (str1 == str2); <span class="comment">// 比较两个字符串是否相等</span></span><br></pre></td></tr></table></figure></li><li><p><strong>不等比较</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> isNotEqual = (str1 != str2); <span class="comment">// 比较两个字符串是否不等</span></span><br></pre></td></tr></table></figure></li><li><p><strong>小于比较</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> isLess = (str1 &lt; str2); <span class="comment">// 比较两个字符串是否str1小于str2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>大于比较</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> isGreater = (str1 &gt; str2); <span class="comment">// 比较两个字符串是否str1大于str2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>子字符串比较</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> cmp = str.<span class="built_in">compare</span>(<span class="number">0</span>, <span class="number">5</span>, <span class="string">&quot;Hello&quot;</span>); <span class="comment">// 比较子字符串</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-其他常用函数"><a href="#5-其他常用函数" class="headerlink" title="5. 其他常用函数"></a>5. 其他常用函数</h3><ul><li><p><strong>转换为大写</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="built_in">transform</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), str.<span class="built_in">begin</span>(), ::toupper); <span class="comment">// 需要包含&lt;algorithm&gt;和&lt;cctype&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>转换为小写</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="built_in">transform</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), str.<span class="built_in">begin</span>(), ::tolower); <span class="comment">// 需要包含&lt;algorithm&gt;和&lt;cctype&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>交换两个字符串</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="built_in">swap</span>(str1, str2); <span class="comment">// 交换两个字符串的内容</span></span><br></pre></td></tr></table></figure></li><li><p><strong>填充字符串</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="string">&#x27;*&#x27;</span>); <span class="comment">// 用字符&#x27;*&#x27;填充字符串，长度为10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-迭代器"><a href="#6-迭代器" class="headerlink" title="6. 迭代器"></a>6. 迭代器</h3><ul><li><p><strong>迭代器访问</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (std::string::iterator it = str.<span class="built_in">begin</span>(); it != str.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    <span class="comment">// 访问和修改字符</span></span><br><span class="line">    *it = <span class="built_in">toupper</span>(*it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>常量迭代器</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (std::string::const_iterator it = str.<span class="built_in">cbegin</span>(); it != str.<span class="built_in">cend</span>(); ++it) &#123;</span><br><span class="line">    <span class="comment">// 只能访问字符，不能修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这些笔记涵盖了<code>std::string</code>类的一些常用功能，但<code>std::string</code>的功能远不止这些。如果你需要更多详细信息，可以参考C++标准库文档或者相关书籍。</p>]]></content>
      
      
      <categories>
          
          <category> STL标准模板库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp学习笔记</title>
      <link href="/2024/10/11/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/uniapp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/10/11/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/uniapp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="属性知识点"><a href="#属性知识点" class="headerlink" title="属性知识点"></a>属性知识点</h2><h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="#使用方法"></a><a href="https://uniapp.dcloud.net.cn/tutorial/platform.html#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">#</a>使用方法</h4><p>以 <code>#ifdef</code> 或 <code>#ifndef</code> 加 <code>%PLATFORM%</code> 开头，以 <code>#endif</code> 结尾。</p><ul><li><code>#ifdef</code>：if defined 仅在某平台存在</li><li><code>#ifndef</code>：if not defined 除了某平台均存在</li><li><code>%PLATFORM%</code>：平台名称</li></ul><table><thead><tr><th>条件编译写法</th><th>说明</th></tr></thead><tbody><tr><td>#ifdef <strong>APP-PLUS</strong> 需条件编译的代码 #endif</td><td>仅出现在 App 平台下的代码</td></tr><tr><td>#ifndef <strong>H5</strong> 需条件编译的代码 #endif</td><td>除了 H5 平台，其它平台均存在的代码（注意if后面有个n）</td></tr><tr><td>#ifdef <strong>H5</strong> || <strong>MP-WEIXIN</strong> 需条件编译的代码 #endif</td><td>在 H5 平台或微信小程序平台存在的代码（这里只有||，不可能出现&amp;&amp;，因为没有交集）</td></tr></tbody></table><p><strong><code>%PLATFORM%</code></strong> 可取值：</p><table><thead><tr><th align="left">值</th><th align="left">生效条件</th><th align="left">版本支持</th></tr></thead><tbody><tr><td align="left">VUE3</td><td align="left">uni-app js引擎版用于区分vue2和3，<a href="https://ask.dcloud.net.cn/article/37834">详情</a></td><td align="left">HBuilderX 3.2.0+</td></tr><tr><td align="left">VUE2</td><td align="left">uni-app js引擎版用于区分vue2和3，<a href="https://ask.dcloud.net.cn/article/37834">详情</a></td><td align="left"></td></tr><tr><td align="left">UNI-APP-X</td><td align="left">用于区分是否是uni-app x项目 <a href="https://uniapp.dcloud.net.cn/tutorial/platform.html#uni-app-x">详情</a></td><td align="left">HBuilderX 3.9.0+</td></tr><tr><td align="left">uniVersion</td><td align="left">用于区分编译器的版本 <a href="https://uniapp.dcloud.net.cn/tutorial/platform.html#universion">详情</a></td><td align="left">HBuilderX 3.9.0+</td></tr><tr><td align="left">APP</td><td align="left">App</td><td align="left"></td></tr><tr><td align="left">APP-PLUS</td><td align="left">uni-app js引擎版编译为App时</td><td align="left"></td></tr><tr><td align="left">APP-PLUS-NVUE或APP-NVUE</td><td align="left">App nvue 页面</td><td align="left"></td></tr><tr><td align="left">APP-ANDROID</td><td align="left">App Android 平台 <a href="https://uniapp.dcloud.net.cn/tutorial/platform.html#uts">详情</a></td><td align="left"></td></tr><tr><td align="left">APP-IOS</td><td align="left">App iOS 平台 <a href="https://uniapp.dcloud.net.cn/tutorial/platform.html#uts">详情</a></td><td align="left"></td></tr><tr><td align="left">APP-HARMONY</td><td align="left">App HarmonyOS Next 平台</td><td align="left"></td></tr><tr><td align="left">H5</td><td align="left">H5（推荐使用 <code>WEB</code>）</td><td align="left"></td></tr><tr><td align="left">WEB</td><td align="left">web（同<code>H5</code>）</td><td align="left">HBuilderX 3.6.3+</td></tr><tr><td align="left">MP-WEIXIN</td><td align="left">微信小程序</td><td align="left"></td></tr><tr><td align="left">MP-ALIPAY</td><td align="left">支付宝小程序</td><td align="left"></td></tr><tr><td align="left">MP-BAIDU</td><td align="left">百度小程序</td><td align="left"></td></tr><tr><td align="left">MP-TOUTIAO</td><td align="left">抖音小程序</td><td align="left"></td></tr><tr><td align="left">MP-LARK</td><td align="left">飞书小程序</td><td align="left"></td></tr><tr><td align="left">MP-QQ</td><td align="left">QQ小程序</td><td align="left"></td></tr><tr><td align="left">MP-KUAISHOU</td><td align="left">快手小程序</td><td align="left"></td></tr><tr><td align="left">MP-JD</td><td align="left">京东小程序</td><td align="left"></td></tr><tr><td align="left">MP-360</td><td align="left">360小程序</td><td align="left"></td></tr><tr><td align="left">MP</td><td align="left">微信小程序&#x2F;支付宝小程序&#x2F;百度小程序&#x2F;抖音小程序&#x2F;飞书小程序&#x2F;QQ小程序&#x2F;360小程序</td><td align="left"></td></tr><tr><td align="left">QUICKAPP-WEBVIEW</td><td align="left">快应用通用(包含联盟、华为)</td><td align="left"></td></tr><tr><td align="left">QUICKAPP-WEBVIEW-UNION</td><td align="left">快应用联盟</td><td align="left"></td></tr><tr><td align="left">QUICKAPP-WEBVIEW-HUAWEI</td><td align="left">快应用华为</td><td align="left"></td></tr></tbody></table><p>支持的文件：</p><ul><li>.vue&#x2F;.nvue&#x2F;.uvue</li><li>.js&#x2F;.uts</li><li>.css</li><li>pages.json</li><li>各预编译语言文件，如：.scss、.less、.stylus、.ts、.pug</li></ul><p><strong>注意：</strong></p><ul><li>条件编译是利用注释实现的，在不同语法里注释写法不一样，js&#x2F;uts使用 <code>// 注释</code>、css 使用 <code>/* 注释 */</code>、vue&#x2F;nvue&#x2F;uvue 模板里使用 <code>&lt;!-- 注释 --&gt;</code>；</li><li>条件编译APP-PLUS包含APP-NVUE和APP-VUE，APP-PLUS-NVUE和APP-NVUE没什么区别，为了简写后面出了APP-NVUE ；</li><li>对于未定义平台名称，可能是名称写错了，也可能是低版本HBuilderX还不认识这个平台。此时的条件编译，<code>#ifdef</code> 中的代码不会生效，而 <code>#ifndef</code> 中的代码会生效；</li><li>使用条件编译请保证<code>编译前</code>和<code>编译后</code>文件的语法正确性，即要保障无论条件编译是否生效都能通过语法校验。比如：json文件中不能有多余的逗号，js中不能重复导入；</li></ul><h3 id="grid网格布局"><a href="#grid网格布局" class="headerlink" title="grid网格布局"></a>grid网格布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: </span><br><span class="line">grid;<span class="attribute">gap</span>: <span class="number">15</span>rpx;</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">1</span>fr);</span><br></pre></td></tr></table></figure><p>这段CSS代码是用来设置一个网格布局的样式。下面是对这段代码的详细解释：</p><ol><li><code>display: grid;</code>：这一行指定了元素的显示方式为网格布局（Grid Layout）。网格布局是一种二维布局系统，它允许开发者以行和列的形式来布局网页内容。</li><li><code>gap: 15rpx;</code>：这一行设置了网格项（grid items）之间的间隙。<code>15rpx</code>可能是一个特定框架或平台（如微信小程序）中的单位，而不是标准的CSS单位。在标准的CSS中，通常会使用<code>px</code>（像素）、<code>em</code>、<code>rem</code>、<code>%</code>等单位。如果<code>rpx</code>是特定框架的单位，它可能用于确保在不同屏幕尺寸上保持一致的视觉比例。</li><li><code>grid-template-columns: repeat(3,1fr);</code>：这一行定义了网格的列布局。<code>repeat(3,1fr)</code>表示创建三列，每列的宽度相同，为1个分数单位（fractional unit，简称fr）。<code>fr</code>是CSS Grid布局中的一个单位，用于在网格容器内分配空间，它允许你按照比例分配空间，而不是使用固定的像素值。在这个例子中，三列将平分网格容器的宽度。</li></ol><p>综上所述，这段CSS代码创建了一个三列的网格布局，每列宽度相等，列与列之间有15rpx的间隙。这种布局非常适合用于创建响应式网页布局，特别是当你希望内容能够根据不同屏幕尺寸自适应调整时。不过，需要注意的是<code>rpx</code>单位可能不是标准的CSS单位，而是特定框架或平台特有的单位。</p><h3 id="Flexbox布局模型。"><a href="#Flexbox布局模型。" class="headerlink" title="Flexbox布局模型。"></a>Flexbox布局模型。</h3><ul><li><code>display: flex;</code>：这个属性将容器的显示方式设置为弹性盒子（flexbox）。这意味着容器内的子元素将使用flexbox模型进行布局，允许更灵活的对齐和分布方式。</li><li><code>align-items: center;</code>：这个属性用来在交叉轴（cross-axis）上对齐容器内的子元素。在默认的flex布局方向（即主轴为水平方向）下，交叉轴是垂直方向。因此，<code>align-items: center;</code>会将所有子元素在容器的垂直方向上居中对齐。</li><li><code>justify-content: center;</code>：这个属性用来在主轴（main-axis）上对齐容器内的子元素。在默认的flex布局方向下，主轴是水平方向。因此，<code>justify-content: center;</code>会将所有子元素在容器的水平方向上居中对齐。</li></ul><p>综上所述，这段CSS代码的作用是将容器内的所有子元素在水平和垂直方向上都居中对齐。这种布局方式常用于创建居中的卡片、提示框或任何需要在页面上居中的元素。</p><h3 id="solid"><a href="#solid" class="headerlink" title="solid"></a>solid</h3><p>在CSS（层叠样式表）中，<code>solid</code> 是一个用于定义边框（border）样式的关键字。具体来说，<code>solid</code> 表示边框是实线（不间断的直线）样式。它是边框样式属性（<code>border-style</code>）的可用值之一。</p><h4 id="边框样式属性的其他可用值"><a href="#边框样式属性的其他可用值" class="headerlink" title="边框样式属性的其他可用值"></a>边框样式属性的其他可用值</h4><p>除了 <code>solid</code> 之外，<code>border-style</code> 属性还支持其他值，例如：</p><ul><li><code>none</code>：无边框。</li><li><code>dotted</code>：点状边框。</li><li><code>dashed</code>：虚线边框。</li><li><code>double</code>：双线边框。</li><li><code>groove</code>：3D凹槽边框效果。</li><li><code>ridge</code>：3D垄状边框效果。</li><li><code>inset</code>：3D内嵌边框效果。</li><li><code>outset</code>：3D外凸边框效果。</li></ul><h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>在uni-app中，<code>padding</code> 是一个用于设置元素内容与边框之间距离的CSS属性。这个属性在网页布局和元素样式设计中非常重要，它可以帮助你控制元素内部的空间，使内容更加美观和易于阅读。</p><p>你也可以单独为某个方向设置内边距，使用以下属性：</p><ul><li><code>padding-top</code>：设置上方向的内边距。</li><li><code>padding-right</code>：设置右方向的内边距。</li><li><code>padding-bottom</code>：设置下方向的内边距。</li><li><code>padding-left</code>：设置左方向的内边距。</li></ul><p>依次设置上、右、下、左四个方向的内边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;  </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ui设计"><a href="#ui设计" class="headerlink" title="ui设计"></a>ui设计</h2><p>可量尺寸</p><blockquote><p><a href="https://js.design/">即时设计 - 可实时协作的专业 UI 设计工具 (js.design)</a></p></blockquote><h2 id="咸虾米壁纸案例"><a href="#咸虾米壁纸案例" class="headerlink" title="咸虾米壁纸案例"></a>咸虾米壁纸案例</h2><blockquote><p><a href="https://gitee.com/qingnian8/univue3/tree/master">uniappVue3版本+咸虾米壁纸: uniappVue3版本基础demo及咸虾米壁纸项目的开源代码 - Gitee.com</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作APP学习记录</title>
      <link href="/2024/10/08/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/%E5%88%B6%E4%BD%9CAPP%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/10/08/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/%E5%88%B6%E4%BD%9CAPP%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="文章初衷"><a href="#文章初衷" class="headerlink" title="文章初衷"></a>文章初衷</h1><p>因为想要学做一款自己的app，app里面添加自己想要的功能，集自己的需求于一款app里。<br>记录学习Flutter制作APP的过程和知识点</p><h1 id="2024年"><a href="#2024年" class="headerlink" title="2024年"></a>2024年</h1><h2 id="10-19"><a href="#10-19" class="headerlink" title="10.19"></a>10.19</h2><ol><li><p>分类页面</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 大模块 --&gt;</span><br><span class="line">&lt;view class=&quot;classLayout&quot;&gt;</span><br><span class="line">&lt;view class=&quot;classify&quot;&gt;</span><br><span class="line">&lt;theme-item v-for=&quot;item in <span class="number">15</span>&quot;&gt;&lt;/theme-item&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"><span class="selector-class">.classify</span>&#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">30</span>rpx;</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">1</span>fr);</span><br><span class="line"><span class="attribute">gap</span>: <span class="number">15</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>我的页面</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;userLayout&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../../static/logo.png&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;ip&quot;</span>&gt;</span>100.100.100.100<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;address&quot;</span>&gt;</span>来自于：山东<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;download-filled&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#28b389&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>我的下载<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>33<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;right&quot;</span> <span class="attr">size</span>=<span class="string">&quot;15&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;star-filled&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#28b389&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>我的评分<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>33<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;right&quot;</span> <span class="attr">size</span>=<span class="string">&quot;15&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;chatboxes-filled&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#28b389&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>联系客服<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;right&quot;</span> <span class="attr">size</span>=<span class="string">&quot;15&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef MP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">&quot;contact&quot;</span>&gt;</span>联系客服<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- #ifndef MP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickContact&quot;</span>&gt;</span>拨打电话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;notification-filled&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#28b389&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>订阅更新<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;right&quot;</span> <span class="attr">size</span>=<span class="string">&quot;15&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;flag-filled&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#28b389&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>常见问题<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;right&quot;</span> <span class="attr">size</span>=<span class="string">&quot;15&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">clickContact</span>=(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">makePhoneCall</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">phoneNumber</span>:<span class="string">&quot;000&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.userLayout</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.userInfo</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">50</span>rpx <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.avatar</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">160</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">160</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">image</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.ip</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">44</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">20</span>rpx <span class="number">0</span> <span class="number">5</span>rpx;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.address</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">28</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#aaa</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.section</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">690</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">50</span>rpx auto;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">10</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">30</span>rpx <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.row</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">// 两端对齐</span></span><br><span class="line"><span class="language-css"><span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">30</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">// 底部最后一个边框去掉，只留下父级边框</span></span><br><span class="line"><span class="language-css">&amp;<span class="selector-pseudo">:last-child</span>&#123;<span class="attribute">border-bottom</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.text</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding-left</span>: <span class="number">20</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.text</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding-left</span>: <span class="number">28</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#aaa</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">button</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">// 透明</span></span><br><span class="line"><span class="language-css"><span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>底部导航栏</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&quot;tabBar&quot;: &#123;  </span><br><span class="line">// 导航栏文字颜色</span><br><span class="line">&quot;<span class="attribute">color</span>&quot;: <span class="string">&quot;#9799a5&quot;</span>,</span><br><span class="line"><span class="string">&quot;selectedColor&quot;</span>: <span class="string">&quot;#28b398&quot;</span>,</span><br><span class="line">// 导航栏列表</span><br><span class="line">    <span class="string">&quot;list&quot;</span>: [  </span><br><span class="line">        &#123;  </span><br><span class="line">            &quot;<span class="selector-tag">text</span>&quot;: <span class="string">&quot;推荐&quot;</span>,  </span><br><span class="line">            <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/index/index&quot;</span> ,</span><br><span class="line"><span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;static/images/tabBar/home.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;static/images/tabBar/home-h.png&quot;</span></span><br><span class="line">        &#125;,  </span><br><span class="line">        &#123;  </span><br><span class="line">            &quot;<span class="selector-tag">text</span>&quot;: <span class="string">&quot;分类&quot;</span>,  </span><br><span class="line">            <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/classify/classify&quot;</span>  ,</span><br><span class="line"><span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;static/images/tabBar/classify.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;static/images/tabBar/classify-h.png&quot;</span></span><br><span class="line">        &#125;,  </span><br><span class="line">        &#123;  </span><br><span class="line">            &quot;<span class="selector-tag">text</span>&quot;: <span class="string">&quot;我的&quot;</span>,  </span><br><span class="line">            <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/user/user&quot;</span>  ,</span><br><span class="line"><span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;static/images/tabBar/user.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;static/images/tabBar/user-h.png&quot;</span></span><br><span class="line">        &#125;  </span><br><span class="line">    ]  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>背景渐变</p><p> 加载common-style.css里面当全局</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.pageBg&#123;</span><br><span class="line">background: </span><br><span class="line">linear-gradient(to bottom,transparent,#fff 400rpx),</span><br><span class="line">linear-gradient(to right,#beecd8 20%,#f4e2d8);</span><br><span class="line">min-height: 80vh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>颜色变量</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;common/style/base-style.scss&quot;</span><br><span class="line"></span><br><span class="line">// 穿刺</span><br><span class="line">:deep()&#123;</span><br><span class="line">    .uni-icons&#123;</span><br><span class="line">        // 最高权重</span><br><span class="line">        color: $brand-theme-color !important;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分类列表</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;classlist&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../../common/images/preview2.jpg&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.classlist</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">1</span>fr);</span></span><br><span class="line"><span class="language-css"><span class="attribute">gap</span>: <span class="number">5</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">440</span>rpx;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">image</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="10-18"><a href="#10-18" class="headerlink" title="10.18"></a>10.18</h2><ol><li><p>做完了首页界面</p><ol><li><p>common-title </p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;common-title&quot;&gt;</span><br><span class="line">&lt;view class=&quot;name&quot;&gt;</span><br><span class="line">&lt;!-- 插槽 --&gt;</span><br><span class="line">&lt;slot name=&quot;name&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;custom&quot;&gt;</span><br><span class="line">&lt;slot name=&quot;custom&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">// 标题</span><br><span class="line"><span class="selector-class">.common-title</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line">// 两端对齐</span><br><span class="line"><span class="attribute">justify-content</span>: space-between; </span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">30</span>rpx;</span><br><span class="line"><span class="selector-class">.name</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">40</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>theme-item</p></li></ol> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;themeItem&quot;&gt;</span><br><span class="line">&lt;navigator url=&quot;&quot; class=&quot;box&quot; v-if=&quot;!isMore&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">image</span> class=&quot;pic&quot; <span class="attribute">src</span>=&quot;../../common/images/classify1<span class="selector-class">.jpg</span>&quot; mode=&quot;aspectFill&quot;&gt;&lt;/<span class="selector-tag">image</span>&gt;</span><br><span class="line">&lt;view class=&quot;<span class="attribute">mask</span>&quot;&gt;明星美女&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;tab&quot;&gt;<span class="number">3</span>天前更新&lt;/view&gt;</span><br><span class="line">&lt;/navigator&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 最后一页更多 --&gt;</span><br><span class="line">&lt;navigator url=&quot;&quot; class=&quot;box more&quot; v-if=&quot;isMore&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">image</span> class=&quot;pic&quot; <span class="attribute">src</span>=&quot;../../common/images/more<span class="selector-class">.jpg</span>&quot; mode=&quot;aspectFill&quot;&gt;&lt;/<span class="selector-tag">image</span>&gt;</span><br><span class="line">&lt;view class=&quot;<span class="attribute">mask</span>&quot;&gt;</span><br><span class="line">&lt;uni-icons type=&quot;more-filled&quot; size=&quot;<span class="number">34</span>&quot; <span class="attribute">color</span>=&quot;<span class="selector-id">#fff</span>&quot;&gt;&lt;/uni-icons&gt;</span><br><span class="line">&lt;view class=&quot;<span class="selector-tag">text</span>&quot;&gt;更多&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/navigator&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">isMore:&#123;</span><br><span class="line">type:Boolean,</span><br><span class="line">default:false</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"><span class="selector-class">.themeItem</span>&#123;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">340</span>rpx;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10</span>rpx;</span><br><span class="line">// 图片盖住box圆角，所以设置hidden</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">// 定位</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="selector-class">.pic</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 图库标记</span><br><span class="line"><span class="selector-class">.mask</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">70</span>rpx;</span><br><span class="line">// 定位文字位置</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rbga</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">50</span>rpx);</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">35</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">// 更新信息</span><br><span class="line"><span class="selector-class">.tab</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">250</span>, <span class="number">129</span>, <span class="number">90</span>, <span class="number">0.7</span>);</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20</span>rpx);</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">22</span>rpx;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">6</span>rpx <span class="number">14</span>rpx;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">20</span>rpx <span class="number">0</span>;</span><br><span class="line">// 缩放和以左上角为基准</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>);</span><br><span class="line"><span class="attribute">transform-origin</span>: left top;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-class">.more</span>&#123;</span><br><span class="line"><span class="selector-class">.mask</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">// 更多和图标分行展示</span><br><span class="line">// 从上到下排列子元素。</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">28</span>rpx;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>index</li></ol> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;homeLayout&quot;&gt;</span><br><span class="line">&lt;!-- 轮播图 --&gt;</span><br><span class="line">&lt;view class=&quot;banner&quot;&gt;</span><br><span class="line">&lt;swiper circular indicator-dots indicator-<span class="attribute">color</span>=&quot;rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>)&quot;</span><br><span class="line">indicator-active-<span class="attribute">color</span>=&quot;<span class="selector-id">#fff</span>&quot; autoplay&gt;</span><br><span class="line">&lt;swiper-item&gt;</span><br><span class="line">&lt;<span class="selector-tag">image</span> <span class="attribute">src</span>=&quot;../../common/images/banner1<span class="selector-class">.jpg</span>&quot; mode=&quot;&quot;&gt;&lt;/<span class="selector-tag">image</span>&gt;</span><br><span class="line">&lt;/swiper-item&gt;</span><br><span class="line">&lt;swiper-item&gt;</span><br><span class="line">&lt;<span class="selector-tag">image</span> <span class="attribute">src</span>=&quot;../../common/images/banner2<span class="selector-class">.jpg</span>&quot; mode=&quot;&quot;&gt;&lt;/<span class="selector-tag">image</span>&gt;</span><br><span class="line">&lt;/swiper-item&gt;</span><br><span class="line">&lt;swiper-item&gt;</span><br><span class="line">&lt;<span class="selector-tag">image</span> <span class="attribute">src</span>=&quot;../../common/images/banner3<span class="selector-class">.jpg</span>&quot; mode=&quot;&quot;&gt;&lt;/<span class="selector-tag">image</span>&gt;</span><br><span class="line">&lt;/swiper-item&gt;</span><br><span class="line">&lt;/swiper&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;!-- 公告栏 --&gt;</span><br><span class="line">&lt;view class=&quot;notice&quot;&gt;</span><br><span class="line">&lt;view class=&quot;<span class="attribute">left</span>&quot;&gt;</span><br><span class="line">&lt;uni-icons type=&quot;sound-filled&quot; size=&quot;<span class="number">20</span>&quot; <span class="attribute">color</span>=&quot;<span class="selector-id">#28b289</span>&quot;&gt;&lt;/uni-icons&gt;</span><br><span class="line">&lt;<span class="selector-tag">text</span> class=&quot;<span class="selector-tag">text</span>&quot;&gt;公告&lt;/<span class="selector-tag">text</span>&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;center&quot;&gt;</span><br><span class="line">&lt;swiper vertical autoplay interval=&quot;<span class="number">1500</span>&quot; duration=&quot;<span class="number">300</span>&quot;&gt;</span><br><span class="line">&lt;swiper-item v-for=&quot;item in <span class="number">4</span>&quot;&gt;文字内容&lt;/swiper-item&gt;</span><br><span class="line">&lt;/swiper&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;<span class="attribute">right</span>&quot;&gt;</span><br><span class="line">&lt;uni-icons type=&quot;<span class="attribute">right</span>&quot; size=&quot;<span class="number">16</span>&quot; <span class="attribute">color</span>=&quot;<span class="selector-id">#333</span>&quot;&gt;&lt;/uni-icons&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;!-- 图片展示区 --&gt;</span><br><span class="line">&lt;view class=&quot;<span class="selector-tag">select</span>&quot;&gt;</span><br><span class="line">&lt;common-title&gt;</span><br><span class="line">&lt;template <span class="selector-id">#name</span>&gt;每日推荐&lt;/template&gt;</span><br><span class="line">&lt;template <span class="selector-id">#custom</span>&gt;</span><br><span class="line">&lt;view class=&quot;date&quot;&gt;</span><br><span class="line">&lt;uni-icons type=&quot;calendar&quot; size=&quot;<span class="number">18</span>&quot; <span class="attribute">color</span>=&quot;<span class="selector-id">#28b289</span>&quot;&gt;&lt;/uni-icons&gt;</span><br><span class="line">&lt;view class=&quot;<span class="selector-tag">text</span>&quot;&gt;</span><br><span class="line">&lt;uni-dateformat :date=<span class="string">&quot;Date.now()&quot;</span> format=<span class="string">&quot;dd&quot;</span>&gt;&lt;/uni-dateformat&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/common-title&gt;</span><br><span class="line">&lt;view class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">&lt;scroll-view scroll-x&gt;</span><br><span class="line">&lt;view class=<span class="string">&quot;box&quot;</span> v-for=<span class="string">&quot;item in 8&quot;</span>&gt;</span><br><span class="line">&lt;image src=<span class="string">&quot;../../common/images/preview_small.webp&quot;</span> mode=<span class="string">&quot;aspectFill&quot;</span>&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/scroll-view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view class=<span class="string">&quot;theme&quot;</span>&gt;</span><br><span class="line">&lt;common-title&gt;</span><br><span class="line">&lt;template #name&gt;专题精选&lt;/template&gt;</span><br><span class="line">&lt;template #custom&gt;</span><br><span class="line">&lt;navigator url=<span class="string">&quot;&quot;</span> class=<span class="string">&quot;more&quot;</span>&gt;More+&lt;/navigator&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/common-title&gt;</span><br><span class="line"></span><br><span class="line">&lt;view class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">&lt;theme-item v-for=<span class="string">&quot;item in 8&quot;</span>&gt;&lt;/theme-item&gt;</span><br><span class="line">&lt;!-- 更多显示 --&gt;</span><br><span class="line">&lt;theme-item :isMore=<span class="string">&quot;true&quot;</span>&gt;&lt;/theme-item&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span>&gt;</span><br><span class="line">.homeLayout&#123;</span><br><span class="line"><span class="selector-class">.banner</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">30</span>rpx <span class="number">0</span>;</span><br><span class="line">swiper&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">340</span>rpx;</span><br><span class="line">// &amp;代表父级</span><br><span class="line">&amp;-item&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">30</span>rpx;</span><br><span class="line"><span class="selector-tag">image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.notice</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">690</span>rpx;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80</span>rpx;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">80</span>rpx;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">80</span>rpx;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">140</span>rpx;</span><br><span class="line">// 水平垂直对齐</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="selector-class">.text</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#28b398</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">28</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line"><span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">swiper&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&amp;-item&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">30</span>rpx;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">// 文字溢出隐藏</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">70</span>rpx;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.select</span>&#123;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">50</span>rpx;</span><br><span class="line">// 日期盒子</span><br><span class="line"><span class="selector-class">.date</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#28b398</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="selector-class">.text</span>&#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">5</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">720</span>rpx;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">30</span>rpx;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line">scroll-view&#123;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">430</span>rpx;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">15</span>rpx;</span><br><span class="line"><span class="selector-tag">image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:last-child</span>&#123;<span class="attribute">margin-right</span>: <span class="number">30</span>rpx;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.theme</span>&#123;</span><br><span class="line">//上下间隔<span class="number">50</span>，左右为<span class="number">0</span></span><br><span class="line"><span class="attribute">padding</span>: <span class="number">50</span>rpx <span class="number">0</span>;</span><br><span class="line"><span class="selector-class">.more</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">32</span>rpx;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span> <span class="number">30</span>rpx;</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line"><span class="attribute">gap</span>: <span class="number">15</span>rpx;</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><p>学习过程中，我发现不懂的知识点可以问ai，ai会给出很好的答案，而且还会进行拓展，这样的话做笔记也可以直接复制，也很全面</p><p>另外手敲一遍代码也是很重要的，可以边敲边看页面的变化，熟悉每个属性。</p><h3 id="配置自动导入模块"><a href="#配置自动导入模块" class="headerlink" title="配置自动导入模块"></a>配置自动导入模块</h3><blockquote><p><a href="https://blog.csdn.net/qq_18798149/article/details/134321097">开发uniapp使用Vue3组合式API版本，如何实现从vue模块中自动导入_uniapp unplugin-auto-import-CSDN博客</a></p></blockquote><h2 id="所需知识学习视频"><a href="#所需知识学习视频" class="headerlink" title="所需知识学习视频"></a>所需知识学习视频</h2><p>因为flutter上手门槛较高，所以改为用uniapp了<br>先去学了前端三件套，再学了vue。先掌握知识点大概，等遇到不会的再继续学习</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><blockquote><p><a href="https://www.bilibili.com/video/BV1BT4y1W7Aw/">3小时前端入门教程（HTML+CSS+JS）</a></p></blockquote><h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><blockquote><p><a href="https://www.bilibili.com/video/BV1Y1421k714/">【2024最新版】Vue3从入门到精通，零基础小白也能听得懂</a></p></blockquote><h3 id="uniapp"><a href="#uniapp" class="headerlink" title="uniapp"></a>uniapp</h3><blockquote><p><a href="https://www.bilibili.com/video/BV1Yg4y127Fp/">零基础入门uniapp Vue3组合式API版本到咸虾米壁纸项目实战</a></p></blockquote><h2 id="Dart-语言开发文档"><a href="#Dart-语言开发文档" class="headerlink" title="Dart 语言开发文档"></a>Dart 语言开发文档</h2><blockquote><p><a href="https://dart.cn/guides/">点击跳转</a></p></blockquote><h2 id="Flutter-官方文档"><a href="#Flutter-官方文档" class="headerlink" title="Flutter 官方文档"></a>Flutter 官方文档</h2><blockquote><p><a href="https://docs.flutter.cn/posts">点击跳转</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技能学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Dart </tag>
            
            <tag> 制作APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习遇到的问题及解决方法</title>
      <link href="/2024/09/28/%E5%AD%A6%E4%B9%A0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2024/09/28/%E5%AD%A6%E4%B9%A0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="2024年"><a href="#2024年" class="headerlink" title="2024年"></a>2024年</h1><h2 id="VScode配置终极版"><a href="#VScode配置终极版" class="headerlink" title="VScode配置终极版"></a>VScode配置终极版</h2><blockquote><p><a href="https://blog.csdn.net/qq_42417071/article/details/137438374">VS Code 配置 C&#x2F;C++ 编程运行环境（保姆级教程）</a></p></blockquote><hr><h2 id="VScodeC-头文件IntelliSense问题以及-9-28（已弃用）"><a href="#VScodeC-头文件IntelliSense问题以及-9-28（已弃用）" class="headerlink" title="VScodeC++头文件IntelliSense问题以及 9.28（已弃用）"></a>VScodeC++头文件IntelliSense问题以及 9.28（已弃用）</h2><details class="toggle"><summary class="toggle-button" style>展开查看详情</summary><div class="toggle-content"><p>更改c++插件配置</p><blockquote><p><a href="https://www.cnblogs.com/lihuigang/p/17186051.html">VScode编写c&#x2F;c++时检测到#include错误，请更新includePath之解决方法</a></p></blockquote><p>安装MinGW64</p><blockquote><p><a href="https://blog.csdn.net/orangebench11/article/details/126111356">在 Windows 中安装 MinGW-w64（mingw-w64-builds-binaries&#x2F;WinLibs&#x2F;Cygwin）</a></p></blockquote></div></details><h2 id="cpp代码模板和万用头文件更改-9-28"><a href="#cpp代码模板和万用头文件更改-9-28" class="headerlink" title="cpp代码模板和万用头文件更改 9.28"></a>cpp代码模板和万用头文件更改 9.28</h2><p>万用头文件更改</p><blockquote><p><a href="https://blog.csdn.net/BlacKingZ/article/details/113487142">VScode找不到C++万能头文件＜bits&#x2F;stdc++.h＞解决办法</a></p></blockquote><p>c++文件代码模板设置</p><blockquote><p><a href="https://blog.csdn.net/justidle/article/details/108811152">VSCode 小技巧：创建 OI 的 C++ 代码模板</a></p></blockquote><h2 id="Q：如何快速获取网站图标-24-27"><a href="#Q：如何快速获取网站图标-24-27" class="headerlink" title="Q：如何快速获取网站图标 24.27"></a>Q：如何快速获取网站图标 24.27</h2><p>参考资料</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/608661725">https://zhuanlan.zhihu.com/p/608661725</a></p></blockquote><details class="toggle"><summary class="toggle-button" style>展开查看详情</summary><div class="toggle-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">通过网址获取</span><br><span class="line">通过官网链接加上/favicon.ico，可以快速获得一个网站的图标，比如：</span><br><span class="line"></span><br><span class="line">1、获取百度图标：https://www.baidu.com/favicon.ico</span><br><span class="line"></span><br><span class="line">2、获取谷歌图标：https://www.google.com/favicon.ico</span><br><span class="line"></span><br><span class="line">2、获取知乎图标：https://static.zhihu.com/heifetz/favicon.ico</span><br><span class="line"></span><br><span class="line">通过接口获取</span><br><span class="line">1、开放接口：https://api.iowen.cn/favicon</span><br><span class="line"></span><br><span class="line">获取百度图标：https://api.iowen.cn/favicon/www.baidu.com.png</span><br><span class="line"></span><br><span class="line">获取谷歌图标：https://api.iowen.cn/favicon/www.google.com.png</span><br><span class="line"></span><br><span class="line">通过上面的开放接口可以获取一个网站的图标，其使用方式就是在接口链接后加上需要获取图标的URL地址，同时要注意确保URL能够正常打开，而且不需要 http(s):// 前缀，且结尾必须填 .png。</span><br><span class="line"></span><br><span class="line">2、开放接口：https://www.google.com/s2/favicons?sz=64&amp;domain=</span><br><span class="line"></span><br><span class="line">获取知乎图标：https://www.google.com/s2/favicons?sz=64&amp;domain=zhihu.com</span><br><span class="line"></span><br><span class="line">获取百度图标：https://www.google.com/s2/favicons?sz=64&amp;domain=baidu.com</span><br><span class="line"></span><br><span class="line">通过上面的开放接口可以获取一个网站的图标，其使用方式就是在接口链接后加上需要获取图标的URL地址，同时要注意确保URL能够正常打开，而且不需要 http(s)://www. 前缀。</span><br><span class="line"></span><br><span class="line">通过图标网站</span><br><span class="line">1、FontAwesome图标网站：https://fontawesome.com/</span><br><span class="line"></span><br><span class="line">2、爱给素材图标网站：https://www.aigei.com/</span><br><span class="line"></span><br><span class="line">3、IconFont图标网站：https://www.iconfont.cn/</span><br></pre></td></tr></table></figure></div></details>]]></content>
      
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试竞赛</title>
      <link href="/2024/09/28/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AB%9E%E8%B5%9B/"/>
      <url>/2024/09/28/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AB%9E%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="大赛介绍以及准备"><a href="#大赛介绍以及准备" class="headerlink" title="大赛介绍以及准备"></a>大赛介绍以及准备</h1><p>参考链接</p><blockquote><p><a href="https://blog.csdn.net/caohongxing/article/details/119056943">全国大学生软件测试大赛 备赛准备</a></p></blockquote><h1 id="2024-web组软件测试"><a href="#2024-web组软件测试" class="headerlink" title="2024 web组软件测试"></a>2024 web组软件测试</h1><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.Duration;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="comment">//import org.openqa.selenium.WebElement;</span></span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.By;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="comment">// Mooctest Selenium Example</span></span><br><span class="line">    <span class="comment">// &lt;!&gt; Check if selenium-standalone.jar is added to build path.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// TODO Test script</span></span><br><span class="line">        <span class="comment">// eg:driver.get(&quot;https://www.baidu.com/&quot;)</span></span><br><span class="line">        <span class="comment">// eg:driver.findElement(By.id(&quot;wd&quot;));</span></span><br><span class="line">    driver.get(<span class="string">&quot;http://120.26.37.204:8088/marks/login&quot;</span>);</span><br><span class="line">    driver.manage().window().maximize();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[1]/div/div[2]/form/div[1]/input&quot;</span>)).sendKeys(<span class="string">&quot;admin&quot;</span>);;</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[1]/div/div[2]/form/div[2]/input&quot;</span>)).sendKeys(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;//*[@id=\&quot;loginFormBtn\&quot;]&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[2]/div[2]/div[2]/a&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[3]/div[2]/div[1]/button/span&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    <span class="comment">//系统用户</span></span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[1]/input&quot;</span>)).sendKeys(<span class="string">&quot;test123&quot;</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[2]/input&quot;</span>)).sendKeys(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[3]/input&quot;</span>)).sendKeys(<span class="string">&quot;测试123&quot;</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[4]/input&quot;</span>)).sendKeys(<span class="string">&quot;20&quot;</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[5]/input[2]&quot;</span>)).click();</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[6]/input[2]&quot;</span>)).click();</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[7]/input&quot;</span>)).sendKeys(<span class="string">&quot;18911112222&quot;</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[8]/input&quot;</span>)).sendKeys(<span class="string">&quot;江苏南京&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;//*[@id=\&quot;addFormBtn\&quot;]&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[9]/div[2]/div[2]/button&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[3]/div[1]/div[2]/div[2]/input&quot;</span>)).sendKeys(<span class="string">&quot;测试名称&quot;</span>);</span><br><span class="line">        driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[3]/div[1]/div[2]/div[3]/input&quot;</span>)).sendKeys(<span class="string">&quot;18911112222&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[3]/div[1]/div[2]/div[4]/button&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;//*[@id=\&quot;tableShow\&quot;]/table/tbody/tr/td[9]/button[2]&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[9]/div[2]/div[2]/button[1]&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    <span class="comment">//会员等级</span></span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[2]/div[2]/div[3]/a&quot;</span>)).click();</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[3]/div[2]/div[1]/button&quot;</span>)).click();</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[1]/input&quot;</span>)).sendKeys(<span class="string">&quot;钻石&quot;</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[2]/input&quot;</span>)).sendKeys(<span class="string">&quot;1000&quot;</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[4]/div[2]/form/div[3]/input&quot;</span>)).sendKeys(<span class="string">&quot;0.5&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;//*[@id=\&quot;addFormBtn\&quot;]&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[9]/div[2]/div[2]/button&quot;</span>)).click();</span><br><span class="line">    <span class="comment">//点击退出</span></span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;/html/body/div[1]/div&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    driver.findElement(By.xpath(<span class="string">&quot;//*[@id=\&quot;sessionExit\&quot;]&quot;</span>)).click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Run main function to test your script.</span></span><br><span class="line">        <span class="type">WebDriver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChromeDriver</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123; test(driver); &#125; </span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123; driver.quit(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用chrome浏览器测试就在chrome浏览器里找元素，因为一开始在edge浏览器找的元素，导致有一些元素定位对不上，找不到元素而出错。</p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新日志</title>
      <link href="/2024/09/27/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E5%90%88%E9%9B%86/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
      <url>/2024/09/27/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E5%90%88%E9%9B%86/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="文章初衷"><a href="#文章初衷" class="headerlink" title="文章初衷"></a>文章初衷</h1><p>记录本博客的更新情况</p><h1 id="2024年"><a href="#2024年" class="headerlink" title="2024年"></a>2024年</h1><h2 id="11-2"><a href="#11-2" class="headerlink" title="11.2"></a>11.2</h2><ol><li>在EU.org网址上申请了一个免费域名jcheng352.eu.org</li></ol><h2 id="10-11"><a href="#10-11" class="headerlink" title="10.11"></a>10.11</h2><ol><li>将网址部署到velcel上，但因为velcel域名被墙，自定义域名需要购买，遂放弃（后续需要再添加）</li></ol><h2 id="10-2"><a href="#10-2" class="headerlink" title="10.2"></a>10.2</h2><ol><li>网址收藏-增加“菜鸟工具”链接</li></ol><h2 id="9-28"><a href="#9-28" class="headerlink" title="9.28"></a>9.28</h2><ol><li>新增网址收藏的网页头像图片</li><li>网址收藏页面新增链接</li><li>文章新增折叠框功能</li></ol><h2 id="9-27"><a href="#9-27" class="headerlink" title="9.27"></a>9.27</h2><ol><li>将图库、音乐、链接折叠到生活类</li><li>新增图库页面（不能显示图片&#x2F;待解决）</li></ol><h2 id="9-26"><a href="#9-26" class="headerlink" title="9.26"></a>9.26</h2><ol><li>博客基础配置更改</li><li>新增全局音乐播放卡片</li><li>新增头像、主页图、社交图标(微信、QQ)展示</li><li>增加文章过期提醒</li><li>增加博客年份设置</li><li>增加博客运行时间</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
          <category> 更新日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 更新日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客创建过程</title>
      <link href="/2024/09/26/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E5%90%88%E9%9B%86/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2024/09/26/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E5%90%88%E9%9B%86/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>记录建立个人博客所用到的教程文档、流程顺序。<br>2024.9.25 下载notejs、git，注册github<br>2024.9.26 成功搭建hexo博客<br>2024.9.27 博客美化改进完成</p><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><ol><li>申请一个免费域名</li></ol><p><a href="https://www.cnblogs.com/eslzzyl/p/17765702.html">eu.org域名的申请流程 - Eslzzyl - 博客园 (cnblogs.com)</a></p><h1 id="hexo-GitHub博客搭建"><a href="#hexo-GitHub博客搭建" class="headerlink" title="hexo+GitHub博客搭建"></a>hexo+GitHub博客搭建</h1><p>参考教程</p><blockquote><p>B站视频：<a href="https://www.bilibili.com/video/BV1Ju4m1c7WR/">https://www.bilibili.com/video/BV1Ju4m1c7WR/</a></p></blockquote><p>博客链接：</p><blockquote><p><a href="https://blog.fiveth.cc/p/bb32/">如何用Hexo搭建个人博客?</a></p></blockquote><blockquote><p><a href="https://blog.fiveth.cc/p/138e/">Hexo搭建进阶：Vercel部署、主题安装、基础用法</a></p></blockquote><p>hexo官方文档</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/">点击文字直达</a></p></blockquote><h1 id="butterfly美化"><a href="#butterfly美化" class="headerlink" title="butterfly美化"></a>butterfly美化</h1><h2 id="下载以及简单配置"><a href="#下载以及简单配置" class="headerlink" title="下载以及简单配置"></a>下载以及简单配置</h2><blockquote><p><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></p></blockquote><blockquote><p><a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安装文档(二) 主题页面</a></p></blockquote><h2 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h2><h3 id="butterfly-官方博客图文版："><a href="#butterfly-官方博客图文版：" class="headerlink" title="butterfly 官方博客图文版："></a>butterfly 官方博客图文版：</h3><blockquote><p><a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 安装文档(三) 主题配置-1</a></p></blockquote><blockquote><p><a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安装文档(四) 主题配置-2</a></p></blockquote><h3 id="全局音乐设置"><a href="#全局音乐设置" class="headerlink" title="全局音乐设置"></a>全局音乐设置</h3><blockquote><p><a href="https://butterfly.js.org/posts/4073eda">Butterfly 安装文档(六) 进阶教程</a></p></blockquote><blockquote><p><a href="https://butterfly.js.org/posts/507c070f/">Butterfly添加全局吸底Aplayer教程</a></p></blockquote><p>还包含 电影、说说、自定义代码配色、自定义侧边栏、添加全局吸底Aplayer教程、Icon</p><h3 id="文章页面美化"><a href="#文章页面美化" class="headerlink" title="文章页面美化"></a>文章页面美化</h3><blockquote><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E9%A0%81%E9%9D%A2%E7%BE%8E%E5%8C%96">点击文字直达</a></p></blockquote><h3 id="页面加载动画-preloader"><a href="#页面加载动画-preloader" class="headerlink" title="页面加载动画 preloader"></a>页面加载动画 preloader</h3><blockquote><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E9%A0%81%E9%9D%A2%E5%8A%A0%E8%BC%89%E5%8B%95%E7%95%AB-preloader">点击文字直达</a></p></blockquote><h3 id="进阶功能教程"><a href="#进阶功能教程" class="headerlink" title="进阶功能教程"></a>进阶功能教程</h3><p><a href="https://blog.imzjw.cn/posts/bfdocs/">Hexo-Butterfly 主题参考手册</a><br><a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus</a></p><blockquote><p>包括标签外挂、链接卡片、按钮等</p></blockquote><h3 id="标签图标网站"><a href="#标签图标网站" class="headerlink" title="标签图标网站"></a>标签图标网站</h3><blockquote><p><a href="https://fontawesome.com/icons">fontawesome</a></p></blockquote><p>随机壁纸API汇总</p><blockquote><p><a href="https://www.fomal.cc/posts/489d3914.html">https://www.fomal.cc/posts/489d3914.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/09/24/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E5%90%88%E9%9B%86/hello-world/"/>
      <url>/2024/09/24/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E5%90%88%E9%9B%86/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
